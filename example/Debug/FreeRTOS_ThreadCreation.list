
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080025b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009c0  20000014  080025c4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200009d4  080025c4  000209d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000da2b  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001e6c7  00000000  00000000  0002da6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003647  00000000  00000000  0004c134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e48  00000000  00000000  0004f780  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00176dbe  00000000  00000000  000505c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011a8  00000000  00000000  001c7388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000099c8  00000000  00000000  001c8530  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038e2b  00000000  00000000  001d1ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0020ad23  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000028d0  00000000  00000000  0020ada0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08002534 	.word	0x08002534

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08002534 	.word	0x08002534

080002e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002e6:	e003      	b.n	80002f0 <LoopCopyDataInit>

080002e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ee:	3104      	adds	r1, #4

080002f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002f8:	d3f6      	bcc.n	80002e8 <CopyDataInit>
  ldr  r2, =_sbss
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002fc:	e002      	b.n	8000304 <LoopFillZerobss>

080002fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000300:	f842 3b04 	str.w	r3, [r2], #4

08000304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000308:	d3f9      	bcc.n	80002fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800030a:	f000 f9e5 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030e:	f002 f8e5 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000312:	f000 f85d 	bl	80003d0 <main>
  bx  lr    
 8000316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800031c:	080025b0 	.word	0x080025b0
  ldr  r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000324:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000328:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800032c:	200009d4 	.word	0x200009d4

08000330 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC3_IRQHandler>
	...

08000334 <LED_Thread2>:
  * @brief  Toggle LED2 thread
  * @param  argument not used
  * @retval None
  */
static void LED_Thread2(void const *argument)
{
 8000334:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  (void) argument;

  for (;;)
  {
    count = osKernelSysTick() + 10000;
 8000336:	f242 7510 	movw	r5, #10000	; 0x2710

    /* Turn off LED2 */
    BSP_LED_Off(LED2);

    /* Resume Thread 1 */
    osThreadResume(LEDThread1Handle);
 800033a:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <LED_Thread2+0x3c>)
    count = osKernelSysTick() + 10000;
 800033c:	f001 f9ec 	bl	8001718 <osKernelSysTick>
 8000340:	1946      	adds	r6, r0, r5
    while (count > osKernelSysTick())
 8000342:	f001 f9e9 	bl	8001718 <osKernelSysTick>
 8000346:	42b0      	cmp	r0, r6
      BSP_LED_Toggle(LED2);
 8000348:	f04f 0001 	mov.w	r0, #1
    while (count > osKernelSysTick())
 800034c:	d308      	bcc.n	8000360 <LED_Thread2+0x2c>
    BSP_LED_Off(LED2);
 800034e:	f000 f99d 	bl	800068c <BSP_LED_Off>
    osThreadResume(LEDThread1Handle);
 8000352:	6820      	ldr	r0, [r4, #0]
 8000354:	f001 fa16 	bl	8001784 <osThreadResume>

    /* Suspend Thread 2 */
    osThreadSuspend(NULL);
 8000358:	2000      	movs	r0, #0
 800035a:	f001 fa0e 	bl	800177a <osThreadSuspend>
    count = osKernelSysTick() + 10000;
 800035e:	e7ed      	b.n	800033c <LED_Thread2+0x8>
      BSP_LED_Toggle(LED2);
 8000360:	f000 f9a8 	bl	80006b4 <BSP_LED_Toggle>
      osDelay(500);
 8000364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000368:	f001 f9f5 	bl	8001756 <osDelay>
 800036c:	e7e9      	b.n	8000342 <LED_Thread2+0xe>
 800036e:	bf00      	nop
 8000370:	200009c8 	.word	0x200009c8

08000374 <LED_Thread1>:
{
 8000374:	b570      	push	{r4, r5, r6, lr}
    count = osKernelSysTick() + 5000;
 8000376:	f241 3488 	movw	r4, #5000	; 0x1388
    osThreadResume(LEDThread2Handle);
 800037a:	4d14      	ldr	r5, [pc, #80]	; (80003cc <LED_Thread1+0x58>)
    count = osKernelSysTick() + 5000;
 800037c:	f001 f9cc 	bl	8001718 <osKernelSysTick>
 8000380:	1906      	adds	r6, r0, r4
    while (count > osKernelSysTick())
 8000382:	f001 f9c9 	bl	8001718 <osKernelSysTick>
 8000386:	42b0      	cmp	r0, r6
      BSP_LED_Toggle(LED1);
 8000388:	f04f 0000 	mov.w	r0, #0
    while (count > osKernelSysTick())
 800038c:	d30f      	bcc.n	80003ae <LED_Thread1+0x3a>
    BSP_LED_Off(LED1);
 800038e:	f000 f97d 	bl	800068c <BSP_LED_Off>
    osThreadSuspend(NULL);
 8000392:	2000      	movs	r0, #0
 8000394:	f001 f9f1 	bl	800177a <osThreadSuspend>
    count = osKernelSysTick() + 5000;
 8000398:	f001 f9be 	bl	8001718 <osKernelSysTick>
 800039c:	1906      	adds	r6, r0, r4
    while (count > osKernelSysTick())
 800039e:	f001 f9bb 	bl	8001718 <osKernelSysTick>
 80003a2:	42b0      	cmp	r0, r6
 80003a4:	d309      	bcc.n	80003ba <LED_Thread1+0x46>
    osThreadResume(LEDThread2Handle);
 80003a6:	6828      	ldr	r0, [r5, #0]
 80003a8:	f001 f9ec 	bl	8001784 <osThreadResume>
    count = osKernelSysTick() + 5000;
 80003ac:	e7e6      	b.n	800037c <LED_Thread1+0x8>
      BSP_LED_Toggle(LED1);
 80003ae:	f000 f981 	bl	80006b4 <BSP_LED_Toggle>
      osDelay(200);
 80003b2:	20c8      	movs	r0, #200	; 0xc8
 80003b4:	f001 f9cf 	bl	8001756 <osDelay>
 80003b8:	e7e3      	b.n	8000382 <LED_Thread1+0xe>
      BSP_LED_Toggle(LED1);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f97a 	bl	80006b4 <BSP_LED_Toggle>
      osDelay(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c4:	f001 f9c7 	bl	8001756 <osDelay>
 80003c8:	e7e9      	b.n	800039e <LED_Thread1+0x2a>
 80003ca:	bf00      	nop
 80003cc:	200009cc 	.word	0x200009cc

080003d0 <main>:
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b09c      	sub	sp, #112	; 0x70
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003d8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003dc:	4b52      	ldr	r3, [pc, #328]	; (8000528 <main+0x158>)
 80003de:	2100      	movs	r1, #0
 80003e0:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80003fc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000400:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000404:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000408:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800040c:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000410:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000414:	07a5      	lsls	r5, r4, #30
 8000416:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000418:	ea02 0c06 	and.w	ip, r2, r6
 800041c:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800041e:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000420:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000424:	3901      	subs	r1, #1
 8000426:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800042a:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 800042e:	1c4f      	adds	r7, r1, #1
 8000430:	d1f6      	bne.n	8000420 <main+0x50>
 8000432:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000434:	f112 0f20 	cmn.w	r2, #32
 8000438:	d1ee      	bne.n	8000418 <main+0x48>
 800043a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000444:	615a      	str	r2, [r3, #20]
 8000446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800044a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800044e:	f000 f987 	bl	8000760 <HAL_Init>
 RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000452:	2002      	movs	r0, #2
 8000454:	f000 fb12 	bl	8000a7c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000458:	2300      	movs	r3, #0
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	4b33      	ldr	r3, [pc, #204]	; (800052c <main+0x15c>)
 800045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000460:	f022 0201 	bic.w	r2, r2, #1
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
 8000466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <main+0x160>)
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000476:	619a      	str	r2, [r3, #24]
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800047e:	9200      	str	r2, [sp, #0]
 8000480:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	0490      	lsls	r0, r2, #18
 8000486:	d5fc      	bpl.n	8000482 <main+0xb2>
   
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000488:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800048c:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000490:	2404      	movs	r4, #4
 8000492:	f44f 71c8 	mov.w	r1, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
   
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000496:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000498:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800049a:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800049e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a0:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80004a4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80004a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a8:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80004aa:	e9cd 4114 	strd	r4, r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ae:	e9cd 4217 	strd	r4, r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80004b2:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004b6:	f000 fb05 	bl	8000ac4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80004ba:	b100      	cbz	r0, 80004be <main+0xee>
 80004bc:	e7fe      	b.n	80004bc <main+0xec>
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
                                  RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);
  
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004be:	223f      	movs	r2, #63	; 0x3f
 80004c0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80004c2:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80004cc:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 80004ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80004d2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004d6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 80004d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 80004da:	e9cd 2307 	strd	r2, r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004de:	f000 fe25 	bl	800112c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80004e2:	4606      	mov	r6, r0
 80004e4:	b100      	cbz	r0, 80004e8 <main+0x118>
 80004e6:	e7fe      	b.n	80004e6 <main+0x116>
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80004e8:	4c12      	ldr	r4, [pc, #72]	; (8000534 <main+0x164>)
  BSP_LED_Init(LED1);
 80004ea:	f000 f885 	bl	80005f8 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80004ee:	4628      	mov	r0, r5
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80004f0:	ad01      	add	r5, sp, #4
  BSP_LED_Init(LED2);
 80004f2:	f000 f881 	bl	80005f8 <BSP_LED_Init>
  osThreadDef(LED1, LED_Thread1, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 80004f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004fa:	f854 3b04 	ldr.w	r3, [r4], #4
 80004fe:	602b      	str	r3, [r5, #0]
  osThreadDef(LED2, LED_Thread2, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000500:	ad09      	add	r5, sp, #36	; 0x24
 8000502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000506:	6823      	ldr	r3, [r4, #0]
  LEDThread1Handle = osThreadCreate(osThread(LED1), NULL);
 8000508:	4631      	mov	r1, r6
 800050a:	a801      	add	r0, sp, #4
  osThreadDef(LED2, LED_Thread2, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800050c:	602b      	str	r3, [r5, #0]
  LEDThread1Handle = osThreadCreate(osThread(LED1), NULL);
 800050e:	f001 f90a 	bl	8001726 <osThreadCreate>
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x168>)
  LEDThread2Handle = osThreadCreate(osThread(LED2), NULL);
 8000514:	4631      	mov	r1, r6
  LEDThread1Handle = osThreadCreate(osThread(LED1), NULL);
 8000516:	6018      	str	r0, [r3, #0]
  LEDThread2Handle = osThreadCreate(osThread(LED2), NULL);
 8000518:	a809      	add	r0, sp, #36	; 0x24
 800051a:	f001 f904 	bl	8001726 <osThreadCreate>
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0x16c>)
 8000520:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000522:	f001 f8f4 	bl	800170e <osKernelStart>
 8000526:	e7fe      	b.n	8000526 <main+0x156>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	58000400 	.word	0x58000400
 8000530:	58024800 	.word	0x58024800
 8000534:	0800254c 	.word	0x0800254c
 8000538:	200009c8 	.word	0x200009c8
 800053c:	200009cc 	.word	0x200009cc

08000540 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	280f      	cmp	r0, #15
{
 8000542:	b510      	push	{r4, lr}
 8000544:	4604      	mov	r4, r0
 8000546:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000548:	d902      	bls.n	8000550 <HAL_InitTick+0x10>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800054a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800054c:	b00a      	add	sp, #40	; 0x28
 800054e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000550:	4601      	mov	r1, r0
 8000552:	2200      	movs	r2, #0
 8000554:	2036      	movs	r0, #54	; 0x36
 8000556:	f000 f95b 	bl	8000810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800055a:	2036      	movs	r0, #54	; 0x36
 800055c:	f000 f98a 	bl	8000874 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000562:	4669      	mov	r1, sp
 8000564:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000566:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_InitTick+0x88>)
 800056a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800056e:	f042 0210 	orr.w	r2, r2, #16
 8000572:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000582:	f000 ff2d 	bl	80013e0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000586:	9b07      	ldr	r3, [sp, #28]
 8000588:	b9c3      	cbnz	r3, 80005bc <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800058a:	f000 ff17 	bl	80013bc <HAL_RCC_GetPCLK1Freq>
  TimHandle.Instance = TIM6;
 800058e:	4c0f      	ldr	r4, [pc, #60]	; (80005cc <HAL_InitTick+0x8c>)
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_InitTick+0x90>)
 8000592:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000594:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000598:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_InitTick+0x94>)
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	3801      	subs	r0, #1
  TimHandle.Init.ClockDivision = 0;
 80005a2:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80005a4:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80005a6:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 80005a8:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80005ac:	f001 f87c 	bl	80016a8 <HAL_TIM_Base_Init>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1ca      	bne.n	800054a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80005b4:	4620      	mov	r0, r4
 80005b6:	f000 ff3f 	bl	8001438 <HAL_TIM_Base_Start_IT>
 80005ba:	e7c7      	b.n	800054c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005bc:	f000 fefe 	bl	80013bc <HAL_RCC_GetPCLK1Freq>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	e7e4      	b.n	800058e <HAL_InitTick+0x4e>
 80005c4:	2000000c 	.word	0x2000000c
 80005c8:	58024400 	.word	0x58024400
 80005cc:	20000030 	.word	0x20000030
 80005d0:	40001000 	.word	0x40001000
 80005d4:	000f4240 	.word	0x000f4240

080005d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80005d8:	f000 b8f0 	b.w	80007bc <HAL_IncTick>

080005dc <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 80005dc:	4801      	ldr	r0, [pc, #4]	; (80005e4 <TIM6_DAC_IRQHandler+0x8>)
 80005de:	f000 bf4d 	b.w	800147c <HAL_TIM_IRQHandler>
 80005e2:	bf00      	nop
 80005e4:	20000030 	.word	0x20000030

080005e8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80005e8:	4770      	bx	lr

080005ea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler>

080005ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler>

080005ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler>

080005f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler>

080005f2 <DebugMon_Handler>:
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 80005f4:	f001 b8b7 	b.w	8001766 <osSystickHandler>

080005f8 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80005f8:	2802      	cmp	r0, #2
{
 80005fa:	b570      	push	{r4, r5, r6, lr}
 80005fc:	b088      	sub	sp, #32
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80005fe:	d83e      	bhi.n	800067e <BSP_LED_Init+0x86>
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <BSP_LED_Init+0x8c>)
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
    {
      LED1_GPIO_CLK_ENABLE();
 8000602:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 8000606:	bb10      	cbnz	r0, 800064e <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 8000608:	f042 0202 	orr.w	r2, r2, #2
 800060c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	9b00      	ldr	r3, [sp, #0]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800061e:	2400      	movs	r4, #0
 8000620:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000622:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000624:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800062c:	6885      	ldr	r5, [r0, #8]
    gpio_init_structure.Pin   = LED_PIN[Led];
 800062e:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000630:	4628      	mov	r0, r5
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000632:	e9cd 2404 	strd	r2, r4, [sp, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	2203      	movs	r2, #3
 8000638:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800063a:	f000 f929 	bl	8000890 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800063e:	4628      	mov	r0, r5
 8000640:	4622      	mov	r2, r4
 8000642:	4631      	mov	r1, r6
 8000644:	f000 fa0e 	bl	8000a64 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000648:	4620      	mov	r0, r4
  }

  return ret;
}
 800064a:	b008      	add	sp, #32
 800064c:	bd70      	pop	{r4, r5, r6, pc}
    else if(Led == LED2)
 800064e:	2801      	cmp	r0, #1
 8000650:	d10a      	bne.n	8000668 <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 8000652:	f042 0210 	orr.w	r2, r2, #16
 8000656:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	9b01      	ldr	r3, [sp, #4]
 8000666:	e7d9      	b.n	800061c <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 8000668:	f042 0202 	orr.w	r2, r2, #2
 800066c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	9b02      	ldr	r3, [sp, #8]
 800067c:	e7ce      	b.n	800061c <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 800067e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000682:	e7e2      	b.n	800064a <BSP_LED_Init+0x52>
 8000684:	58024400 	.word	0x58024400
 8000688:	08002574 	.word	0x08002574

0800068c <BSP_LED_Off>:
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800068c:	2802      	cmp	r0, #2
{
 800068e:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000690:	d80a      	bhi.n	80006a8 <BSP_LED_Off+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <BSP_LED_Off+0x24>)
 8000694:	2200      	movs	r2, #0
 8000696:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800069a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800069e:	68a0      	ldr	r0, [r4, #8]
 80006a0:	f000 f9e0 	bl	8000a64 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80006a4:	2000      	movs	r0, #0
  }

  return ret;
}
 80006a6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80006a8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80006ac:	e7fb      	b.n	80006a6 <BSP_LED_Off+0x1a>
 80006ae:	bf00      	nop
 80006b0:	08002574 	.word	0x08002574

080006b4 <BSP_LED_Toggle>:
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80006b4:	2802      	cmp	r0, #2
{
 80006b6:	b508      	push	{r3, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80006b8:	d809      	bhi.n	80006ce <BSP_LED_Toggle+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <BSP_LED_Toggle+0x20>)
 80006bc:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80006c0:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80006c4:	6890      	ldr	r0, [r2, #8]
 80006c6:	f000 f9d2 	bl	8000a6e <HAL_GPIO_TogglePin>
  int32_t ret = BSP_ERROR_NONE;
 80006ca:	2000      	movs	r0, #0
  }

  return ret;
}
 80006cc:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80006ce:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80006d2:	e7fb      	b.n	80006cc <BSP_LED_Toggle+0x18>
 80006d4:	08002574 	.word	0x08002574

080006d8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006d8:	491a      	ldr	r1, [pc, #104]	; (8000744 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80006e4:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <SystemInit+0x74>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	f042 0201 	orr.w	r2, r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80006f8:	681c      	ldr	r4, [r3, #0]
 80006fa:	4020      	ands	r0, r4
 80006fc:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800070c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 800070e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000712:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800071a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <SystemInit+0x78>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800072a:	d202      	bcs.n	8000732 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SystemInit+0x7c>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <SystemInit+0x80>)
 8000734:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000738:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800073a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800073e:	608b      	str	r3, [r1, #8]
#endif  


}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	eaf6ed7f 	.word	0xeaf6ed7f
 800074c:	58024400 	.word	0x58024400
 8000750:	5c001000 	.word	0x5c001000
 8000754:	51008108 	.word	0x51008108
 8000758:	52004000 	.word	0x52004000

0800075c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800075c:	4770      	bx	lr
	...

08000760 <HAL_Init>:
{
 8000760:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000762:	2003      	movs	r0, #3
 8000764:	f000 f842 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000768:	f000 fc44 	bl	8000ff4 <HAL_RCC_GetSysClockFreq>
 800076c:	490f      	ldr	r1, [pc, #60]	; (80007ac <HAL_Init+0x4c>)
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <HAL_Init+0x50>)
 8000770:	698b      	ldr	r3, [r1, #24]
 8000772:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000776:	5cd3      	ldrb	r3, [r2, r3]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800077e:	698b      	ldr	r3, [r1, #24]
 8000780:	f003 030f 	and.w	r3, r3, #15
 8000784:	5cd3      	ldrb	r3, [r2, r3]
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_Init+0x54>)
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	fa20 f303 	lsr.w	r3, r0, r3
 8000790:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_Init+0x58>)
 8000794:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000796:	200f      	movs	r0, #15
 8000798:	f7ff fed2 	bl	8000540 <HAL_InitTick>
 800079c:	4604      	mov	r4, r0
 800079e:	b918      	cbnz	r0, 80007a8 <HAL_Init+0x48>
  HAL_MspInit();
 80007a0:	f7ff ffdc 	bl	800075c <HAL_MspInit>
}
 80007a4:	4620      	mov	r0, r4
 80007a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80007a8:	2401      	movs	r4, #1
 80007aa:	e7fb      	b.n	80007a4 <HAL_Init+0x44>
 80007ac:	58024400 	.word	0x58024400
 80007b0:	08002588 	.word	0x08002588
 80007b4:	20000004 	.word	0x20000004
 80007b8:	20000000 	.word	0x20000000

080007bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <HAL_IncTick+0x10>)
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <HAL_IncTick+0x14>)
 80007c0:	6811      	ldr	r1, [r2, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	440b      	add	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	200009d0 	.word	0x200009d0
 80007d0:	20000008 	.word	0x20000008

080007d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d4:	4b01      	ldr	r3, [pc, #4]	; (80007dc <HAL_GetTick+0x8>)
 80007d6:	6818      	ldr	r0, [r3, #0]
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200009d0 	.word	0x200009d0

080007e0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <HAL_GetREVID+0x8>)
 80007e2:	6818      	ldr	r0, [r3, #0]
}
 80007e4:	0c00      	lsrs	r0, r0, #16
 80007e6:	4770      	bx	lr
 80007e8:	5c001000 	.word	0x5c001000

080007ec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007fa:	041b      	lsls	r3, r3, #16
 80007fc:	0c1b      	lsrs	r3, r3, #16
 80007fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000806:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000808:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000812:	b570      	push	{r4, r5, r6, lr}
 8000814:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000816:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	2d04      	cmp	r5, #4
 8000826:	bf28      	it	cs
 8000828:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000830:	bf8c      	ite	hi
 8000832:	3c03      	subhi	r4, #3
 8000834:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000836:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	ea21 0303 	bic.w	r3, r1, r3
 800083c:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	fa06 f404 	lsl.w	r4, r6, r4
 8000844:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	ea43 0304 	orr.w	r3, r3, r4
 800084c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000850:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000852:	db06      	blt.n	8000862 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000858:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800085c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000860:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	f000 000f 	and.w	r0, r0, #15
 8000866:	4a02      	ldr	r2, [pc, #8]	; (8000870 <HAL_NVIC_SetPriority+0x60>)
 8000868:	5413      	strb	r3, [r2, r0]
 800086a:	e7f9      	b.n	8000860 <HAL_NVIC_SetPriority+0x50>
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	e000ed14 	.word	0xe000ed14

08000874 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000874:	2800      	cmp	r0, #0
 8000876:	db08      	blt.n	800088a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000878:	0942      	lsrs	r2, r0, #5
 800087a:	2301      	movs	r3, #1
 800087c:	f000 001f 	and.w	r0, r0, #31
 8000880:	fa03 f000 	lsl.w	r0, r3, r0
 8000884:	4b01      	ldr	r3, [pc, #4]	; (800088c <HAL_NVIC_EnableIRQ+0x18>)
 8000886:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000894:	680b      	ldr	r3, [r1, #0]
{
 8000896:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000a5c <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800089c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008a0:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80008a2:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80008a4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000a60 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008a8:	9a01      	ldr	r2, [sp, #4]
 80008aa:	40da      	lsrs	r2, r3
 80008ac:	d102      	bne.n	80008b4 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80008ae:	b005      	add	sp, #20
 80008b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008b4:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 80008b6:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008b8:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 80008ba:	ea17 0502 	ands.w	r5, r7, r2
 80008be:	f000 80b6 	beq.w	8000a2e <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c2:	684a      	ldr	r2, [r1, #4]
 80008c4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008c8:	2403      	movs	r4, #3
 80008ca:	f022 0a10 	bic.w	sl, r2, #16
 80008ce:	fa04 f40e 	lsl.w	r4, r4, lr
 80008d2:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 80008d6:	43e4      	mvns	r4, r4
 80008d8:	2e01      	cmp	r6, #1
 80008da:	d810      	bhi.n	80008fe <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 80008dc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008de:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e2:	68ce      	ldr	r6, [r1, #12]
 80008e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80008e8:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 80008ec:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008ee:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008f4:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80008f8:	409e      	lsls	r6, r3
 80008fa:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 80008fc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80008fe:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000904:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000906:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090a:	fa06 f60e 	lsl.w	r6, r6, lr
 800090e:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000912:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	d114      	bne.n	8000940 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 8000916:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800091a:	f003 0b07 	and.w	fp, r3, #7
 800091e:	270f      	movs	r7, #15
 8000920:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000924:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000928:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800092c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000930:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000934:	690e      	ldr	r6, [r1, #16]
 8000936:	fa06 f60b 	lsl.w	r6, r6, fp
 800093a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800093c:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8000940:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000942:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000944:	f002 0603 	and.w	r6, r2, #3
 8000948:	fa06 fe0e 	lsl.w	lr, r6, lr
 800094c:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8000950:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000952:	00d4      	lsls	r4, r2, #3
 8000954:	d56b      	bpl.n	8000a2e <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800095a:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800095e:	f003 0703 	and.w	r7, r3, #3
 8000962:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	f044 0402 	orr.w	r4, r4, #2
 800096a:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800096e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000974:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000978:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800097c:	f004 0402 	and.w	r4, r4, #2
 8000980:	9403      	str	r4, [sp, #12]
 8000982:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000984:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000988:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800098c:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000990:	4c31      	ldr	r4, [pc, #196]	; (8000a58 <HAL_GPIO_Init+0x1c8>)
 8000992:	42a0      	cmp	r0, r4
 8000994:	d04d      	beq.n	8000a32 <HAL_GPIO_Init+0x1a2>
 8000996:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800099a:	42a0      	cmp	r0, r4
 800099c:	d04b      	beq.n	8000a36 <HAL_GPIO_Init+0x1a6>
 800099e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009a2:	42a0      	cmp	r0, r4
 80009a4:	d049      	beq.n	8000a3a <HAL_GPIO_Init+0x1aa>
 80009a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009aa:	42a0      	cmp	r0, r4
 80009ac:	d047      	beq.n	8000a3e <HAL_GPIO_Init+0x1ae>
 80009ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009b2:	42a0      	cmp	r0, r4
 80009b4:	d045      	beq.n	8000a42 <HAL_GPIO_Init+0x1b2>
 80009b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ba:	42a0      	cmp	r0, r4
 80009bc:	d043      	beq.n	8000a46 <HAL_GPIO_Init+0x1b6>
 80009be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009c2:	42a0      	cmp	r0, r4
 80009c4:	d041      	beq.n	8000a4a <HAL_GPIO_Init+0x1ba>
 80009c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009ca:	42a0      	cmp	r0, r4
 80009cc:	d03f      	beq.n	8000a4e <HAL_GPIO_Init+0x1be>
 80009ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009d2:	42a0      	cmp	r0, r4
 80009d4:	d03d      	beq.n	8000a52 <HAL_GPIO_Init+0x1c2>
 80009d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009da:	42a0      	cmp	r0, r4
 80009dc:	bf14      	ite	ne
 80009de:	240a      	movne	r4, #10
 80009e0:	2409      	moveq	r4, #9
 80009e2:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e4:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009e6:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009ea:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80009ec:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 80009f0:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 80009f4:	bf54      	ite	pl
 80009f6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80009f8:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009fa:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 80009fc:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000a00:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 8000a04:	bf54      	ite	pl
 8000a06:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a08:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a0a:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000a0c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000a10:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000a14:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000a18:	bf54      	ite	pl
 8000a1a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a1c:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1e:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000a20:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000a22:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 8000a24:	bf54      	ite	pl
 8000a26:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000a28:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000a2a:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000a2e:	3301      	adds	r3, #1
 8000a30:	e73a      	b.n	80008a8 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a32:	2400      	movs	r4, #0
 8000a34:	e7d5      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a36:	2401      	movs	r4, #1
 8000a38:	e7d3      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a3a:	2402      	movs	r4, #2
 8000a3c:	e7d1      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a3e:	2403      	movs	r4, #3
 8000a40:	e7cf      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a42:	2404      	movs	r4, #4
 8000a44:	e7cd      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a46:	2405      	movs	r4, #5
 8000a48:	e7cb      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a4a:	2406      	movs	r4, #6
 8000a4c:	e7c9      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a4e:	2407      	movs	r4, #7
 8000a50:	e7c7      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a52:	2408      	movs	r4, #8
 8000a54:	e7c5      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 8000a56:	bf00      	nop
 8000a58:	58020000 	.word	0x58020000
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58000080 	.word	0x58000080

08000a64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a64:	b10a      	cbz	r2, 8000a6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a66:	6181      	str	r1, [r0, #24]
  }
}
 8000a68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a6a:	0409      	lsls	r1, r1, #16
 8000a6c:	e7fb      	b.n	8000a66 <HAL_GPIO_WritePin+0x2>

08000a6e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000a6e:	6943      	ldr	r3, [r0, #20]
 8000a70:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a74:	bf08      	it	eq
 8000a76:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a78:	6181      	str	r1, [r0, #24]
  }
}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000a7c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000a7e:	4c10      	ldr	r4, [pc, #64]	; (8000ac0 <HAL_PWREx_ConfigSupply+0x44>)
 8000a80:	68e3      	ldr	r3, [r4, #12]
 8000a82:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a86:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000a88:	d105      	bne.n	8000a96 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a8a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a8e:	1a18      	subs	r0, r3, r0
 8000a90:	bf18      	it	ne
 8000a92:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000a94:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a96:	f023 0307 	bic.w	r3, r3, #7
 8000a9a:	4318      	orrs	r0, r3
 8000a9c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8000a9e:	f7ff fe99 	bl	80007d4 <HAL_GetTick>
 8000aa2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	049b      	lsls	r3, r3, #18
 8000aa8:	d501      	bpl.n	8000aae <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8000aaa:	2000      	movs	r0, #0
 8000aac:	e7f2      	b.n	8000a94 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000aae:	f7ff fe91 	bl	80007d4 <HAL_GetTick>
 8000ab2:	1b40      	subs	r0, r0, r5
 8000ab4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ab8:	d9f4      	bls.n	8000aa4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8000aba:	2001      	movs	r0, #1
 8000abc:	e7ea      	b.n	8000a94 <HAL_PWREx_ConfigSupply+0x18>
 8000abe:	bf00      	nop
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	b908      	cbnz	r0, 8000ace <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	e08e      	b.n	8000bec <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ace:	6803      	ldr	r3, [r0, #0]
 8000ad0:	07dd      	lsls	r5, r3, #31
 8000ad2:	d45e      	bmi.n	8000b92 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	0798      	lsls	r0, r3, #30
 8000ad8:	f100 80b0 	bmi.w	8000c3c <HAL_RCC_OscConfig+0x178>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	06da      	lsls	r2, r3, #27
 8000ae0:	d527      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae2:	4baa      	ldr	r3, [pc, #680]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000ae4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ae6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000aec:	2a08      	cmp	r2, #8
 8000aee:	d007      	beq.n	8000b00 <HAL_RCC_OscConfig+0x3c>
 8000af0:	2a18      	cmp	r2, #24
 8000af2:	f040 810e 	bne.w	8000d12 <HAL_RCC_OscConfig+0x24e>
 8000af6:	f001 0203 	and.w	r2, r1, #3
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	f040 8109 	bne.w	8000d12 <HAL_RCC_OscConfig+0x24e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	d502      	bpl.n	8000b0c <HAL_RCC_OscConfig+0x48>
 8000b06:	69e3      	ldr	r3, [r4, #28]
 8000b08:	2b80      	cmp	r3, #128	; 0x80
 8000b0a:	d1de      	bne.n	8000aca <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000b0c:	f7ff fe68 	bl	80007e0 <HAL_GetREVID>
 8000b10:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b14:	6a21      	ldr	r1, [r4, #32]
 8000b16:	4298      	cmp	r0, r3
 8000b18:	4b9c      	ldr	r3, [pc, #624]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000b1a:	f200 80f3 	bhi.w	8000d04 <HAL_RCC_OscConfig+0x240>
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	2920      	cmp	r1, #32
 8000b22:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8000b26:	bf0c      	ite	eq
 8000b28:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8000b2c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8000b30:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	0719      	lsls	r1, r3, #28
 8000b36:	f100 812d 	bmi.w	8000d94 <HAL_RCC_OscConfig+0x2d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	069a      	lsls	r2, r3, #26
 8000b3e:	f100 814e 	bmi.w	8000dde <HAL_RCC_OscConfig+0x31a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	075d      	lsls	r5, r3, #29
 8000b46:	d51e      	bpl.n	8000b86 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8000b48:	4d91      	ldr	r5, [pc, #580]	; (8000d90 <HAL_RCC_OscConfig+0x2cc>)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b52:	f7ff fe3f 	bl	80007d4 <HAL_GetTick>
 8000b56:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	05da      	lsls	r2, r3, #23
 8000b5c:	f140 8164 	bpl.w	8000e28 <HAL_RCC_OscConfig+0x364>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b60:	68a3      	ldr	r3, [r4, #8]
 8000b62:	4d8a      	ldr	r5, [pc, #552]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	f040 8166 	bne.w	8000e36 <HAL_RCC_OscConfig+0x372>
 8000b6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b76:	f7ff fe2d 	bl	80007d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b7a:	4e84      	ldr	r6, [pc, #528]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000b7c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b7e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b80:	079b      	lsls	r3, r3, #30
 8000b82:	f140 817e 	bpl.w	8000e82 <HAL_RCC_OscConfig+0x3be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	f040 8181 	bne.w	8000e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
  }
  return HAL_OK;
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e02c      	b.n	8000bec <HAL_RCC_OscConfig+0x128>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b92:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000b94:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b96:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b98:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000b9c:	2a10      	cmp	r2, #16
 8000b9e:	d005      	beq.n	8000bac <HAL_RCC_OscConfig+0xe8>
 8000ba0:	2a18      	cmp	r2, #24
 8000ba2:	d10a      	bne.n	8000bba <HAL_RCC_OscConfig+0xf6>
 8000ba4:	f001 0203 	and.w	r2, r1, #3
 8000ba8:	2a02      	cmp	r2, #2
 8000baa:	d106      	bne.n	8000bba <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0399      	lsls	r1, r3, #14
 8000bb0:	d590      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x10>
 8000bb2:	6863      	ldr	r3, [r4, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d18d      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x10>
 8000bb8:	e787      	b.n	8000aca <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	6863      	ldr	r3, [r4, #4]
 8000bbc:	4d73      	ldr	r5, [pc, #460]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d114      	bne.n	8000bee <HAL_RCC_OscConfig+0x12a>
 8000bc4:	682b      	ldr	r3, [r5, #0]
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	602b      	str	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bcc:	f241 3588 	movw	r5, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fe00 	bl	80007d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd4:	4e6d      	ldr	r6, [pc, #436]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000bd6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd8:	6833      	ldr	r3, [r6, #0]
 8000bda:	039a      	lsls	r2, r3, #14
 8000bdc:	f53f af7a 	bmi.w	8000ad4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fdf8 	bl	80007d4 <HAL_GetTick>
 8000be4:	1bc0      	subs	r0, r0, r7
 8000be6:	42a8      	cmp	r0, r5
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x114>
            return HAL_TIMEOUT;
 8000bea:	2003      	movs	r0, #3
}
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	b9b3      	cbnz	r3, 8000c1e <HAL_RCC_OscConfig+0x15a>
 8000bf0:	682b      	ldr	r3, [r5, #0]
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf2:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfa:	602b      	str	r3, [r5, #0]
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c04:	f7ff fde6 	bl	80007d4 <HAL_GetTick>
 8000c08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c0a:	682b      	ldr	r3, [r5, #0]
 8000c0c:	039b      	lsls	r3, r3, #14
 8000c0e:	f57f af61 	bpl.w	8000ad4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c12:	f7ff fddf 	bl	80007d4 <HAL_GetTick>
 8000c16:	1b80      	subs	r0, r0, r6
 8000c18:	42b8      	cmp	r0, r7
 8000c1a:	d9f6      	bls.n	8000c0a <HAL_RCC_OscConfig+0x146>
 8000c1c:	e7e5      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	d103      	bne.n	8000c2e <HAL_RCC_OscConfig+0x16a>
 8000c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2a:	602b      	str	r3, [r5, #0]
 8000c2c:	e7ca      	b.n	8000bc4 <HAL_RCC_OscConfig+0x100>
 8000c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	e7c6      	b.n	8000bca <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3c:	4b53      	ldr	r3, [pc, #332]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000c3e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c40:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c42:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8000c46:	d003      	beq.n	8000c50 <HAL_RCC_OscConfig+0x18c>
 8000c48:	2a18      	cmp	r2, #24
 8000c4a:	d120      	bne.n	8000c8e <HAL_RCC_OscConfig+0x1ca>
 8000c4c:	078e      	lsls	r6, r1, #30
 8000c4e:	d11e      	bne.n	8000c8e <HAL_RCC_OscConfig+0x1ca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	075d      	lsls	r5, r3, #29
 8000c54:	d503      	bpl.n	8000c5e <HAL_RCC_OscConfig+0x19a>
 8000c56:	68e3      	ldr	r3, [r4, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f43f af36 	beq.w	8000aca <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5e:	f7ff fdbf 	bl	80007e0 <HAL_GetREVID>
 8000c62:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c66:	6921      	ldr	r1, [r4, #16]
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	d809      	bhi.n	8000c84 <HAL_RCC_OscConfig+0x1c0>
 8000c70:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8000c74:	2940      	cmp	r1, #64	; 0x40
 8000c76:	bf0c      	ite	eq
 8000c78:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8000c7c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e72b      	b.n	8000adc <HAL_RCC_OscConfig+0x18>
 8000c84:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000c88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000c8c:	e7f8      	b.n	8000c80 <HAL_RCC_OscConfig+0x1bc>
 8000c8e:	4d3f      	ldr	r5, [pc, #252]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c90:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c92:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c94:	b332      	cbz	r2, 8000ce4 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c96:	f023 0319 	bic.w	r3, r3, #25
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fd99 	bl	80007d4 <HAL_GetTick>
 8000ca2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	0758      	lsls	r0, r3, #29
 8000ca8:	d511      	bpl.n	8000cce <HAL_RCC_OscConfig+0x20a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	f7ff fd99 	bl	80007e0 <HAL_GetREVID>
 8000cae:	f241 0303 	movw	r3, #4099	; 0x1003
 8000cb2:	6922      	ldr	r2, [r4, #16]
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	686b      	ldr	r3, [r5, #4]
 8000cb8:	d80f      	bhi.n	8000cda <HAL_RCC_OscConfig+0x216>
 8000cba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000cbe:	2a40      	cmp	r2, #64	; 0x40
 8000cc0:	bf0c      	ite	eq
 8000cc2:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000cc6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000cca:	606b      	str	r3, [r5, #4]
 8000ccc:	e706      	b.n	8000adc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fd81 	bl	80007d4 <HAL_GetTick>
 8000cd2:	1b80      	subs	r0, r0, r6
 8000cd4:	2802      	cmp	r0, #2
 8000cd6:	d9e5      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x1e0>
 8000cd8:	e787      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000cde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ce2:	e7f2      	b.n	8000cca <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_DISABLE();
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fd73 	bl	80007d4 <HAL_GetTick>
 8000cee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	0759      	lsls	r1, r3, #29
 8000cf4:	f57f aef2 	bpl.w	8000adc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fd6c 	bl	80007d4 <HAL_GetTick>
 8000cfc:	1b80      	subs	r0, r0, r6
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9f6      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x22c>
 8000d02:	e772      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000d0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	e70f      	b.n	8000b32 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000d12:	69e3      	ldr	r3, [r4, #28]
 8000d14:	4d1d      	ldr	r5, [pc, #116]	; (8000d8c <HAL_RCC_OscConfig+0x2c8>)
 8000d16:	b343      	cbz	r3, 8000d6a <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_CSI_ENABLE();
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d20:	f7ff fd58 	bl	80007d4 <HAL_GetTick>
 8000d24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	05df      	lsls	r7, r3, #23
 8000d2a:	d511      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d2c:	f7ff fd58 	bl	80007e0 <HAL_GetREVID>
 8000d30:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d34:	6a22      	ldr	r2, [r4, #32]
 8000d36:	4298      	cmp	r0, r3
 8000d38:	d810      	bhi.n	8000d5c <HAL_RCC_OscConfig+0x298>
 8000d3a:	686b      	ldr	r3, [r5, #4]
 8000d3c:	2a20      	cmp	r2, #32
 8000d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000d42:	bf0c      	ite	eq
 8000d44:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000d48:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000d4c:	606b      	str	r3, [r5, #4]
 8000d4e:	e6f0      	b.n	8000b32 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d50:	f7ff fd40 	bl	80007d4 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9e5      	bls.n	8000d26 <HAL_RCC_OscConfig+0x262>
 8000d5a:	e746      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d5c:	68eb      	ldr	r3, [r5, #12]
 8000d5e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d66:	60eb      	str	r3, [r5, #12]
 8000d68:	e6e3      	b.n	8000b32 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff fd2f 	bl	80007d4 <HAL_GetTick>
 8000d76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	05d8      	lsls	r0, r3, #23
 8000d7c:	f57f aed9 	bpl.w	8000b32 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d80:	f7ff fd28 	bl	80007d4 <HAL_GetTick>
 8000d84:	1b80      	subs	r0, r0, r6
 8000d86:	2802      	cmp	r0, #2
 8000d88:	d9f6      	bls.n	8000d78 <HAL_RCC_OscConfig+0x2b4>
 8000d8a:	e72e      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d94:	6963      	ldr	r3, [r4, #20]
 8000d96:	4d96      	ldr	r5, [pc, #600]	; (8000ff0 <HAL_RCC_OscConfig+0x52c>)
 8000d98:	b183      	cbz	r3, 8000dbc <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8000d9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000da2:	f7ff fd17 	bl	80007d4 <HAL_GetTick>
 8000da6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000da8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000daa:	079b      	lsls	r3, r3, #30
 8000dac:	f53f aec5 	bmi.w	8000b3a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fd10 	bl	80007d4 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9f6      	bls.n	8000da8 <HAL_RCC_OscConfig+0x2e4>
 8000dba:	e716      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8000dbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fd06 	bl	80007d4 <HAL_GetTick>
 8000dc8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dcc:	079f      	lsls	r7, r3, #30
 8000dce:	f57f aeb4 	bpl.w	8000b3a <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fcff 	bl	80007d4 <HAL_GetTick>
 8000dd6:	1b80      	subs	r0, r0, r6
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f6      	bls.n	8000dca <HAL_RCC_OscConfig+0x306>
 8000ddc:	e705      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000dde:	69a3      	ldr	r3, [r4, #24]
 8000de0:	4d83      	ldr	r5, [pc, #524]	; (8000ff0 <HAL_RCC_OscConfig+0x52c>)
 8000de2:	b183      	cbz	r3, 8000e06 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000dec:	f7ff fcf2 	bl	80007d4 <HAL_GetTick>
 8000df0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	0498      	lsls	r0, r3, #18
 8000df6:	f53f aea4 	bmi.w	8000b42 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000dfa:	f7ff fceb 	bl	80007d4 <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	2802      	cmp	r0, #2
 8000e02:	d9f6      	bls.n	8000df2 <HAL_RCC_OscConfig+0x32e>
 8000e04:	e6f1      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e0c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fce1 	bl	80007d4 <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	0499      	lsls	r1, r3, #18
 8000e18:	f57f ae93 	bpl.w	8000b42 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e1c:	f7ff fcda 	bl	80007d4 <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2802      	cmp	r0, #2
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x350>
 8000e26:	e6e0      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e28:	f7ff fcd4 	bl	80007d4 <HAL_GetTick>
 8000e2c:	1b80      	subs	r0, r0, r6
 8000e2e:	2864      	cmp	r0, #100	; 0x64
 8000e30:	f67f ae92 	bls.w	8000b58 <HAL_RCC_OscConfig+0x94>
 8000e34:	e6d9      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e36:	b9b3      	cbnz	r3, 8000e66 <HAL_RCC_OscConfig+0x3a2>
 8000e38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	672b      	str	r3, [r5, #112]	; 0x70
 8000e44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e46:	f023 0304 	bic.w	r3, r3, #4
 8000e4a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fcc2 	bl	80007d4 <HAL_GetTick>
 8000e50:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e54:	0798      	lsls	r0, r3, #30
 8000e56:	f57f ae96 	bpl.w	8000b86 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fcbb 	bl	80007d4 <HAL_GetTick>
 8000e5e:	1b80      	subs	r0, r0, r6
 8000e60:	42b8      	cmp	r0, r7
 8000e62:	d9f6      	bls.n	8000e52 <HAL_RCC_OscConfig+0x38e>
 8000e64:	e6c1      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e6a:	d103      	bne.n	8000e74 <HAL_RCC_OscConfig+0x3b0>
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	672b      	str	r3, [r5, #112]	; 0x70
 8000e72:	e67a      	b.n	8000b6a <HAL_RCC_OscConfig+0xa6>
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	672b      	str	r3, [r5, #112]	; 0x70
 8000e7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7c:	f023 0304 	bic.w	r3, r3, #4
 8000e80:	e676      	b.n	8000b70 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fca7 	bl	80007d4 <HAL_GetTick>
 8000e86:	1bc0      	subs	r0, r0, r7
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	f67f ae78 	bls.w	8000b7e <HAL_RCC_OscConfig+0xba>
 8000e8e:	e6ac      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000e90:	4d57      	ldr	r5, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x52c>)
 8000e92:	692b      	ldr	r3, [r5, #16]
 8000e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e98:	2b18      	cmp	r3, #24
 8000e9a:	d07a      	beq.n	8000f92 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8000e9c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ea4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea6:	d167      	bne.n	8000f78 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fc94 	bl	80007d4 <HAL_GetTick>
 8000eac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	0199      	lsls	r1, r3, #6
 8000eb2:	d45b      	bmi.n	8000f6c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000eb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000eb8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000ebc:	f023 0303 	bic.w	r3, r3, #3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ec4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000ec8:	62ab      	str	r3, [r5, #40]	; 0x28
 8000eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ecc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	0412      	lsls	r2, r2, #16
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000edc:	4313      	orrs	r3, r2
 8000ede:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000eea:	3a01      	subs	r2, #1
 8000eec:	0612      	lsls	r2, r2, #24
 8000eee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000ef6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000efe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f0e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000f10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f14:	f023 030c 	bic.w	r3, r3, #12
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000f1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f20:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f24:	4c32      	ldr	r4, [pc, #200]	; (8000ff0 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000f26:	4313      	orrs	r3, r2
 8000f28:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000f2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000f32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000f3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000f42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc3f 	bl	80007d4 <HAL_GetTick>
 8000f56:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	019a      	lsls	r2, r3, #6
 8000f5c:	f53f ae17 	bmi.w	8000b8e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fc38 	bl	80007d4 <HAL_GetTick>
 8000f64:	1b40      	subs	r0, r0, r5
 8000f66:	2802      	cmp	r0, #2
 8000f68:	d9f6      	bls.n	8000f58 <HAL_RCC_OscConfig+0x494>
 8000f6a:	e63e      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fc32 	bl	80007d4 <HAL_GetTick>
 8000f70:	1b80      	subs	r0, r0, r6
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d99b      	bls.n	8000eae <HAL_RCC_OscConfig+0x3ea>
 8000f76:	e638      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc2c 	bl	80007d4 <HAL_GetTick>
 8000f7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	f57f ae04 	bpl.w	8000b8e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fc25 	bl	80007d4 <HAL_GetTick>
 8000f8a:	1b00      	subs	r0, r0, r4
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f6      	bls.n	8000f7e <HAL_RCC_OscConfig+0x4ba>
 8000f90:	e62b      	b.n	8000bea <HAL_RCC_OscConfig+0x126>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f92:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000f94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000f96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f98:	f43f ae28 	beq.w	8000bec <HAL_RCC_OscConfig+0x128>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fa2:	4281      	cmp	r1, r0
 8000fa4:	f47f ad91 	bne.w	8000aca <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fa8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fae:	428a      	cmp	r2, r1
 8000fb0:	f47f ad8b 	bne.w	8000aca <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000fb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fb6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8000fba:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fbc:	4291      	cmp	r1, r2
 8000fbe:	f47f ad84 	bne.w	8000aca <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000fc2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000fc4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8000fc8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000fca:	4291      	cmp	r1, r2
 8000fcc:	f47f ad7d 	bne.w	8000aca <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000fd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fd2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8000fd6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000fd8:	4291      	cmp	r1, r2
 8000fda:	f47f ad76 	bne.w	8000aca <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000fde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000fe0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8000fe4:	3801      	subs	r0, #1
    return HAL_ERROR;
 8000fe6:	1a18      	subs	r0, r3, r0
 8000fe8:	bf18      	it	ne
 8000fea:	2001      	movne	r0, #1
 8000fec:	e5fe      	b.n	8000bec <HAL_RCC_OscConfig+0x128>
 8000fee:	bf00      	nop
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff4:	4b46      	ldr	r3, [pc, #280]	; (8001110 <HAL_RCC_GetSysClockFreq+0x11c>)
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ffc:	2a10      	cmp	r2, #16
{
 8000ffe:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001000:	f000 8084 	beq.w	800110c <HAL_RCC_GetSysClockFreq+0x118>
 8001004:	2a18      	cmp	r2, #24
 8001006:	d00c      	beq.n	8001022 <HAL_RCC_GetSysClockFreq+0x2e>
 8001008:	b10a      	cbz	r2, 800100e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800100a:	4842      	ldr	r0, [pc, #264]	; (8001114 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800100c:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4841      	ldr	r0, [pc, #260]	; (8001118 <HAL_RCC_GetSysClockFreq+0x124>)
 8001012:	f012 0f20 	tst.w	r2, #32
 8001016:	d0f9      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800101e:	40d8      	lsrs	r0, r3
 8001020:	e7f4      	b.n	800100c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001022:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001024:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001028:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800102c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800102e:	2800      	cmp	r0, #0
 8001030:	d0ec      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x18>
 8001032:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001036:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800103a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800103e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001046:	4342      	muls	r2, r0
 8001048:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800104c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8001050:	2a01      	cmp	r2, #1
 8001052:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001056:	d002      	beq.n	800105e <HAL_RCC_GetSysClockFreq+0x6a>
 8001058:	d30f      	bcc.n	800107a <HAL_RCC_GetSysClockFreq+0x86>
 800105a:	2a02      	cmp	r2, #2
 800105c:	d048      	beq.n	80010f0 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001064:	ee07 3a10 	vmov	s14, r3
 8001068:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001074:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800111c <HAL_RCC_GetSysClockFreq+0x128>
 8001078:	e037      	b.n	80010ea <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	0692      	lsls	r2, r2, #26
 800107e:	d527      	bpl.n	80010d0 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_RCC_GetSysClockFreq+0x124>)
 8001084:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800108a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800108c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001090:	ee07 2a10 	vmov	s14, r2
 8001094:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001098:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800109c:	ee06 3a90 	vmov	s13, r3
 80010a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80010a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010a8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80010b8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80010ba:	ee07 3a10 	vmov	s14, r3
 80010be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80010c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80010ca:	ee17 0a90 	vmov	r0, s15
 80010ce:	e79d      	b.n	800100c <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d6:	ee07 3a10 	vmov	s14, r3
 80010da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80010e6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001120 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010ea:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80010ee:	e7dd      	b.n	80010ac <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f6:	ee07 3a10 	vmov	s14, r3
 80010fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001106:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001124 <HAL_RCC_GetSysClockFreq+0x130>
 800110a:	e7ee      	b.n	80010ea <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <HAL_RCC_GetSysClockFreq+0x134>)
 800110e:	e77d      	b.n	800100c <HAL_RCC_GetSysClockFreq+0x18>
 8001110:	58024400 	.word	0x58024400
 8001114:	003d0900 	.word	0x003d0900
 8001118:	03d09000 	.word	0x03d09000
 800111c:	4a742400 	.word	0x4a742400
 8001120:	4c742400 	.word	0x4c742400
 8001124:	4af42400 	.word	0x4af42400
 8001128:	007a1200 	.word	0x007a1200

0800112c <HAL_RCC_ClockConfig>:
{
 800112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001130:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001132:	4604      	mov	r4, r0
 8001134:	b910      	cbnz	r0, 800113c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
}
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800113c:	4a88      	ldr	r2, [pc, #544]	; (8001360 <HAL_RCC_ClockConfig+0x234>)
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	428b      	cmp	r3, r1
 8001146:	f0c0 8093 	bcc.w	8001270 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	075f      	lsls	r7, r3, #29
 800114e:	f100 809b 	bmi.w	8001288 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001152:	071e      	lsls	r6, r3, #28
 8001154:	d50b      	bpl.n	800116e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001156:	4983      	ldr	r1, [pc, #524]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001158:	6966      	ldr	r6, [r4, #20]
 800115a:	69c8      	ldr	r0, [r1, #28]
 800115c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001160:	4286      	cmp	r6, r0
 8001162:	d904      	bls.n	800116e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001164:	69ca      	ldr	r2, [r1, #28]
 8001166:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800116a:	4332      	orrs	r2, r6
 800116c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116e:	06d8      	lsls	r0, r3, #27
 8001170:	d50b      	bpl.n	800118a <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001172:	497c      	ldr	r1, [pc, #496]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001174:	69a6      	ldr	r6, [r4, #24]
 8001176:	69c8      	ldr	r0, [r1, #28]
 8001178:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800117c:	4286      	cmp	r6, r0
 800117e:	d904      	bls.n	800118a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001180:	69ca      	ldr	r2, [r1, #28]
 8001182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001186:	4332      	orrs	r2, r6
 8001188:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800118a:	0699      	lsls	r1, r3, #26
 800118c:	d50b      	bpl.n	80011a6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800118e:	4975      	ldr	r1, [pc, #468]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001190:	69e6      	ldr	r6, [r4, #28]
 8001192:	6a08      	ldr	r0, [r1, #32]
 8001194:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001198:	4286      	cmp	r6, r0
 800119a:	d904      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800119c:	6a0a      	ldr	r2, [r1, #32]
 800119e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011a2:	4332      	orrs	r2, r6
 80011a4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a6:	079a      	lsls	r2, r3, #30
 80011a8:	d50b      	bpl.n	80011c2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80011aa:	496e      	ldr	r1, [pc, #440]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 80011ac:	68e6      	ldr	r6, [r4, #12]
 80011ae:	6988      	ldr	r0, [r1, #24]
 80011b0:	f000 000f 	and.w	r0, r0, #15
 80011b4:	4286      	cmp	r6, r0
 80011b6:	d904      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	698a      	ldr	r2, [r1, #24]
 80011ba:	f022 020f 	bic.w	r2, r2, #15
 80011be:	4332      	orrs	r2, r6
 80011c0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	07df      	lsls	r7, r3, #31
 80011c4:	d46e      	bmi.n	80012a4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	079e      	lsls	r6, r3, #30
 80011ca:	f100 80a1 	bmi.w	8001310 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ce:	4964      	ldr	r1, [pc, #400]	; (8001360 <HAL_RCC_ClockConfig+0x234>)
 80011d0:	680a      	ldr	r2, [r1, #0]
 80011d2:	f002 020f 	and.w	r2, r2, #15
 80011d6:	42aa      	cmp	r2, r5
 80011d8:	f200 80a8 	bhi.w	800132c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80011dc:	0758      	lsls	r0, r3, #29
 80011de:	f100 80b1 	bmi.w	8001344 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e2:	0719      	lsls	r1, r3, #28
 80011e4:	d50b      	bpl.n	80011fe <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80011e6:	495f      	ldr	r1, [pc, #380]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 80011e8:	6965      	ldr	r5, [r4, #20]
 80011ea:	69c8      	ldr	r0, [r1, #28]
 80011ec:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80011f0:	4285      	cmp	r5, r0
 80011f2:	d204      	bcs.n	80011fe <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80011f4:	69ca      	ldr	r2, [r1, #28]
 80011f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011fa:	432a      	orrs	r2, r5
 80011fc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fe:	06da      	lsls	r2, r3, #27
 8001200:	d50b      	bpl.n	800121a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001202:	4958      	ldr	r1, [pc, #352]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001204:	69a5      	ldr	r5, [r4, #24]
 8001206:	69c8      	ldr	r0, [r1, #28]
 8001208:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800120c:	4285      	cmp	r5, r0
 800120e:	d204      	bcs.n	800121a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001210:	69ca      	ldr	r2, [r1, #28]
 8001212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001216:	432a      	orrs	r2, r5
 8001218:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	d50b      	bpl.n	8001236 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800121e:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001220:	69e0      	ldr	r0, [r4, #28]
 8001222:	6a11      	ldr	r1, [r2, #32]
 8001224:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001228:	4288      	cmp	r0, r1
 800122a:	d204      	bcs.n	8001236 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800122c:	6a13      	ldr	r3, [r2, #32]
 800122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001232:	4303      	orrs	r3, r0
 8001234:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001236:	f7ff fedd 	bl	8000ff4 <HAL_RCC_GetSysClockFreq>
 800123a:	494a      	ldr	r1, [pc, #296]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_RCC_ClockConfig+0x23c>)
 800123e:	698b      	ldr	r3, [r1, #24]
 8001240:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800124c:	698b      	ldr	r3, [r1, #24]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	4a45      	ldr	r2, [pc, #276]	; (800136c <HAL_RCC_ClockConfig+0x240>)
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	fa20 f303 	lsr.w	r3, r0, r3
 800125e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <HAL_RCC_ClockConfig+0x244>)
 8001262:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_ClockConfig+0x248>)
}
 8001266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f7ff b968 	b.w	8000540 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f023 030f 	bic.w	r3, r3, #15
 8001276:	430b      	orrs	r3, r1
 8001278:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	428b      	cmp	r3, r1
 8001282:	f47f af58 	bne.w	8001136 <HAL_RCC_ClockConfig+0xa>
 8001286:	e760      	b.n	800114a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001288:	4936      	ldr	r1, [pc, #216]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 800128a:	6926      	ldr	r6, [r4, #16]
 800128c:	6988      	ldr	r0, [r1, #24]
 800128e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001292:	4286      	cmp	r6, r0
 8001294:	f67f af5d 	bls.w	8001152 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001298:	698a      	ldr	r2, [r1, #24]
 800129a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800129e:	4332      	orrs	r2, r6
 80012a0:	618a      	str	r2, [r1, #24]
 80012a2:	e756      	b.n	8001152 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 80012a6:	68a1      	ldr	r1, [r4, #8]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80012ae:	430a      	orrs	r2, r1
 80012b0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	2902      	cmp	r1, #2
 80012b8:	d11d      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012be:	f43f af3a 	beq.w	8001136 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c8:	4e26      	ldr	r6, [pc, #152]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	f022 0207 	bic.w	r2, r2, #7
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80012d2:	f7ff fa7f 	bl	80007d4 <HAL_GetTick>
 80012d6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d8:	6933      	ldr	r3, [r6, #16]
 80012da:	6862      	ldr	r2, [r4, #4]
 80012dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012e0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80012e4:	f43f af6f 	beq.w	80011c6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fa74 	bl	80007d4 <HAL_GetTick>
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	4540      	cmp	r0, r8
 80012f0:	d9f2      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	e720      	b.n	8001138 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	2903      	cmp	r1, #3
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012fe:	e7de      	b.n	80012be <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001300:	2901      	cmp	r1, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001304:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001308:	e7d9      	b.n	80012be <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130a:	f012 0f04 	tst.w	r2, #4
 800130e:	e7d6      	b.n	80012be <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001310:	4914      	ldr	r1, [pc, #80]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001312:	68e6      	ldr	r6, [r4, #12]
 8001314:	6988      	ldr	r0, [r1, #24]
 8001316:	f000 000f 	and.w	r0, r0, #15
 800131a:	4286      	cmp	r6, r0
 800131c:	f4bf af57 	bcs.w	80011ce <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001320:	698a      	ldr	r2, [r1, #24]
 8001322:	f022 020f 	bic.w	r2, r2, #15
 8001326:	4332      	orrs	r2, r6
 8001328:	618a      	str	r2, [r1, #24]
 800132a:	e750      	b.n	80011ce <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132c:	680a      	ldr	r2, [r1, #0]
 800132e:	f022 020f 	bic.w	r2, r2, #15
 8001332:	432a      	orrs	r2, r5
 8001334:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	680a      	ldr	r2, [r1, #0]
 8001338:	f002 020f 	and.w	r2, r2, #15
 800133c:	42aa      	cmp	r2, r5
 800133e:	f47f aefa 	bne.w	8001136 <HAL_RCC_ClockConfig+0xa>
 8001342:	e74b      	b.n	80011dc <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <HAL_RCC_ClockConfig+0x238>)
 8001346:	6925      	ldr	r5, [r4, #16]
 8001348:	6988      	ldr	r0, [r1, #24]
 800134a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800134e:	4285      	cmp	r5, r0
 8001350:	f4bf af47 	bcs.w	80011e2 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001354:	698a      	ldr	r2, [r1, #24]
 8001356:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800135a:	432a      	orrs	r2, r5
 800135c:	618a      	str	r2, [r1, #24]
 800135e:	e740      	b.n	80011e2 <HAL_RCC_ClockConfig+0xb6>
 8001360:	52002000 	.word	0x52002000
 8001364:	58024400 	.word	0x58024400
 8001368:	08002588 	.word	0x08002588
 800136c:	20000004 	.word	0x20000004
 8001370:	20000000 	.word	0x20000000
 8001374:	2000000c 	.word	0x2000000c

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800137a:	f7ff fe3b 	bl	8000ff4 <HAL_RCC_GetSysClockFreq>
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_RCC_GetHCLKFreq+0x34>)
 8001380:	490b      	ldr	r1, [pc, #44]	; (80013b0 <HAL_RCC_GetHCLKFreq+0x38>)
 8001382:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001384:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001386:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800138a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001398:	5c88      	ldrb	r0, [r1, r2]
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800139c:	f000 001f 	and.w	r0, r0, #31
 80013a0:	fa23 f000 	lsr.w	r0, r3, r0
 80013a4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_RCC_GetHCLKFreq+0x40>)
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80013aa:	bd08      	pop	{r3, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	08002588 	.word	0x08002588
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013bc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80013be:	f7ff ffdb 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80013d2:	40d8      	lsrs	r0, r3
 80013d4:	bd08      	pop	{r3, pc}
 80013d6:	bf00      	nop
 80013d8:	58024400 	.word	0x58024400
 80013dc:	08002588 	.word	0x08002588

080013e0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80013e0:	233f      	movs	r3, #63	; 0x3f
 80013e2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_GetClockConfig+0x4c>)
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	f002 0207 	and.w	r2, r2, #7
 80013ec:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80013f4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	f002 020f 	and.w	r2, r2, #15
 80013fc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001404:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800140c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001414:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800141c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_RCC_GetClockConfig+0x50>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	600b      	str	r3, [r1, #0]
}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	58024400 	.word	0x58024400
 8001430:	52002000 	.word	0x52002000

08001434 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001434:	4770      	bx	lr
	...

08001438 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001438:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800143c:	2b01      	cmp	r3, #1
 800143e:	d115      	bne.n	800146c <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001440:	2302      	movs	r3, #2
 8001442:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001446:	6803      	ldr	r3, [r0, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_TIM_Base_Start_IT+0x38>)
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001456:	2a06      	cmp	r2, #6
 8001458:	d006      	beq.n	8001468 <HAL_TIM_Base_Start_IT+0x30>
 800145a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800145e:	d003      	beq.n	8001468 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001468:	2000      	movs	r0, #0
}
 800146a:	4770      	bx	lr
    return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
 800146e:	4770      	bx	lr
 8001470:	00010007 	.word	0x00010007

08001474 <HAL_TIM_OC_DelayElapsedCallback>:
 8001474:	4770      	bx	lr

08001476 <HAL_TIM_IC_CaptureCallback>:
 8001476:	4770      	bx	lr

08001478 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001478:	4770      	bx	lr

0800147a <HAL_TIM_TriggerCallback>:
 800147a:	4770      	bx	lr

0800147c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800147c:	6803      	ldr	r3, [r0, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	0791      	lsls	r1, r2, #30
{
 8001482:	b510      	push	{r4, lr}
 8001484:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001486:	d50f      	bpl.n	80014a8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	0792      	lsls	r2, r2, #30
 800148c:	d50c      	bpl.n	80014a8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800148e:	f06f 0202 	mvn.w	r2, #2
 8001492:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001494:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001496:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001498:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800149a:	0799      	lsls	r1, r3, #30
 800149c:	f000 8085 	beq.w	80015aa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014a0:	f7ff ffe9 	bl	8001476 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a4:	2300      	movs	r3, #0
 80014a6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	0752      	lsls	r2, r2, #29
 80014ae:	d510      	bpl.n	80014d2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	0750      	lsls	r0, r2, #29
 80014b4:	d50d      	bpl.n	80014d2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014b6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014be:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014c0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80014c8:	d075      	beq.n	80015b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ca:	f7ff ffd4 	bl	8001476 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ce:	2300      	movs	r3, #0
 80014d0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	0711      	lsls	r1, r2, #28
 80014d8:	d50f      	bpl.n	80014fa <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	0712      	lsls	r2, r2, #28
 80014de:	d50c      	bpl.n	80014fa <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014e0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014e8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014ee:	079b      	lsls	r3, r3, #30
 80014f0:	d067      	beq.n	80015c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80014f2:	f7ff ffc0 	bl	8001476 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f6:	2300      	movs	r3, #0
 80014f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	06d0      	lsls	r0, r2, #27
 8001500:	d510      	bpl.n	8001524 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	06d1      	lsls	r1, r2, #27
 8001506:	d50d      	bpl.n	8001524 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001508:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800150e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001510:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001512:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001514:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001516:	f413 7f40 	tst.w	r3, #768	; 0x300
 800151a:	d058      	beq.n	80015ce <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800151c:	f7ff ffab 	bl	8001476 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001520:	2300      	movs	r3, #0
 8001522:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	07d2      	lsls	r2, r2, #31
 800152a:	d508      	bpl.n	800153e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	07d0      	lsls	r0, r2, #31
 8001530:	d505      	bpl.n	800153e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001532:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001536:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001538:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800153a:	f7ff f84d 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	0611      	lsls	r1, r2, #24
 8001544:	d508      	bpl.n	8001558 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	0612      	lsls	r2, r2, #24
 800154a:	d505      	bpl.n	8001558 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800154c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001550:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001552:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001554:	f000 f8d9 	bl	800170a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	05d0      	lsls	r0, r2, #23
 800155e:	d508      	bpl.n	8001572 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	0611      	lsls	r1, r2, #24
 8001564:	d505      	bpl.n	8001572 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001566:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800156a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800156c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800156e:	f000 f8cd 	bl	800170c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	0652      	lsls	r2, r2, #25
 8001578:	d508      	bpl.n	800158c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	0650      	lsls	r0, r2, #25
 800157e:	d505      	bpl.n	800158c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001580:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001584:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001586:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001588:	f7ff ff77 	bl	800147a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	0691      	lsls	r1, r2, #26
 8001592:	d522      	bpl.n	80015da <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	0692      	lsls	r2, r2, #26
 8001598:	d51f      	bpl.n	80015da <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800159a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800159e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015a0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80015a6:	f000 b8af 	b.w	8001708 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015aa:	f7ff ff63 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ff62 	bl	8001478 <HAL_TIM_PWM_PulseFinishedCallback>
 80015b4:	e776      	b.n	80014a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b6:	f7ff ff5d 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff ff5c 	bl	8001478 <HAL_TIM_PWM_PulseFinishedCallback>
 80015c0:	e785      	b.n	80014ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c2:	f7ff ff57 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff ff56 	bl	8001478 <HAL_TIM_PWM_PulseFinishedCallback>
 80015cc:	e793      	b.n	80014f6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	f7ff ff51 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff ff50 	bl	8001478 <HAL_TIM_PWM_PulseFinishedCallback>
 80015d8:	e7a2      	b.n	8001520 <HAL_TIM_IRQHandler+0xa4>
}
 80015da:	bd10      	pop	{r4, pc}

080015dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80015de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015e0:	4290      	cmp	r0, r2
 80015e2:	d012      	beq.n	800160a <TIM_Base_SetConfig+0x2e>
 80015e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015e8:	d00f      	beq.n	800160a <TIM_Base_SetConfig+0x2e>
 80015ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015ee:	4290      	cmp	r0, r2
 80015f0:	d00b      	beq.n	800160a <TIM_Base_SetConfig+0x2e>
 80015f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015f6:	4290      	cmp	r0, r2
 80015f8:	d007      	beq.n	800160a <TIM_Base_SetConfig+0x2e>
 80015fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015fe:	4290      	cmp	r0, r2
 8001600:	d003      	beq.n	800160a <TIM_Base_SetConfig+0x2e>
 8001602:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001606:	4290      	cmp	r0, r2
 8001608:	d119      	bne.n	800163e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800160a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800160c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001610:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001612:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <TIM_Base_SetConfig+0xc4>)
 8001614:	4290      	cmp	r0, r2
 8001616:	d01d      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 8001618:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800161c:	d01a      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 800161e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001622:	4290      	cmp	r0, r2
 8001624:	d016      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 8001626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800162a:	4290      	cmp	r0, r2
 800162c:	d012      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 800162e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001632:	4290      	cmp	r0, r2
 8001634:	d00e      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 8001636:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800163a:	4290      	cmp	r0, r2
 800163c:	d00a      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <TIM_Base_SetConfig+0xc8>)
 8001640:	4290      	cmp	r0, r2
 8001642:	d007      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 8001644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001648:	4290      	cmp	r0, r2
 800164a:	d003      	beq.n	8001654 <TIM_Base_SetConfig+0x78>
 800164c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001650:	4290      	cmp	r0, r2
 8001652:	d103      	bne.n	800165c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001658:	68ca      	ldr	r2, [r1, #12]
 800165a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800165c:	694a      	ldr	r2, [r1, #20]
 800165e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001662:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001664:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001666:	688b      	ldr	r3, [r1, #8]
 8001668:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800166a:	680b      	ldr	r3, [r1, #0]
 800166c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <TIM_Base_SetConfig+0xc4>)
 8001670:	4298      	cmp	r0, r3
 8001672:	d00f      	beq.n	8001694 <TIM_Base_SetConfig+0xb8>
 8001674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001678:	4298      	cmp	r0, r3
 800167a:	d00b      	beq.n	8001694 <TIM_Base_SetConfig+0xb8>
 800167c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8001680:	4298      	cmp	r0, r3
 8001682:	d007      	beq.n	8001694 <TIM_Base_SetConfig+0xb8>
 8001684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001688:	4298      	cmp	r0, r3
 800168a:	d003      	beq.n	8001694 <TIM_Base_SetConfig+0xb8>
 800168c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001690:	4298      	cmp	r0, r3
 8001692:	d101      	bne.n	8001698 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001694:	690b      	ldr	r3, [r1, #16]
 8001696:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001698:	2301      	movs	r3, #1
 800169a:	6143      	str	r3, [r0, #20]
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40014000 	.word	0x40014000

080016a8 <HAL_TIM_Base_Init>:
{
 80016a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80016aa:	4604      	mov	r4, r0
 80016ac:	b350      	cbz	r0, 8001704 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b6:	b91b      	cbnz	r3, 80016c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016bc:	f7ff feba 	bl	8001434 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80016c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ca:	f7ff ff87 	bl	80015dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ce:	2301      	movs	r3, #1
  return HAL_OK;
 80016d0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80016da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80016de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80016e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80016f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80016fa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80016fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001702:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e7fc      	b.n	8001702 <HAL_TIM_Base_Init+0x5a>

08001708 <HAL_TIMEx_CommutCallback>:
 8001708:	4770      	bx	lr

0800170a <HAL_TIMEx_BreakCallback>:
 800170a:	4770      	bx	lr

0800170c <HAL_TIMEx_Break2Callback>:
 800170c:	4770      	bx	lr

0800170e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800170e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001710:	f000 fa68 	bl	8001be4 <vTaskStartScheduler>
  
  return osOK;
}
 8001714:	2000      	movs	r0, #0
 8001716:	bd08      	pop	{r3, pc}

08001718 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001718:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800171c:	b10b      	cbz	r3, 8001722 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800171e:	f000 baa7 	b.w	8001c70 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8001722:	f000 ba9f 	b.w	8001c64 <xTaskGetTickCount>

08001726 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001726:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001728:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800172c:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800172e:	8a02      	ldrh	r2, [r0, #16]
{
 8001730:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8001732:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001734:	e9d0 1500 	ldrd	r1, r5, [r0]
    fpriority += (priority - osPriorityIdle);
 8001738:	bf14      	ite	ne
 800173a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800173c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800173e:	a803      	add	r0, sp, #12
 8001740:	e9cd 4000 	strd	r4, r0, [sp]
 8001744:	4628      	mov	r0, r5
 8001746:	f000 f8ff 	bl	8001948 <xTaskCreate>
 800174a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800174c:	bf0c      	ite	eq
 800174e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001750:	2000      	movne	r0, #0
}
 8001752:	b005      	add	sp, #20
 8001754:	bd30      	pop	{r4, r5, pc}

08001756 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001756:	2800      	cmp	r0, #0
 8001758:	bf08      	it	eq
 800175a:	2001      	moveq	r0, #1
{
 800175c:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800175e:	f000 fb6d 	bl	8001e3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001762:	2000      	movs	r0, #0
 8001764:	bd08      	pop	{r3, pc}

08001766 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001766:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001768:	f000 fc1e 	bl	8001fa8 <xTaskGetSchedulerState>
 800176c:	2801      	cmp	r0, #1
 800176e:	d003      	beq.n	8001778 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001774:	f000 bdd6 	b.w	8002324 <xPortSysTickHandler>
}
 8001778:	bd08      	pop	{r3, pc}

0800177a <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800177a:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800177c:	f000 fbb6 	bl	8001eec <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001780:	2000      	movs	r0, #0
 8001782:	bd08      	pop	{r3, pc}

08001784 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001784:	b508      	push	{r3, lr}
 8001786:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800178a:	b16b      	cbz	r3, 80017a8 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800178c:	f000 f9dc 	bl	8001b48 <xTaskResumeFromISR>
 8001790:	2801      	cmp	r0, #1
 8001792:	d107      	bne.n	80017a4 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <osThreadResume+0x2c>)
 8001796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 80017a4:	2000      	movs	r0, #0
 80017a6:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 80017a8:	f000 f990 	bl	8001acc <vTaskResume>
 80017ac:	e7fa      	b.n	80017a4 <osThreadResume+0x20>
 80017ae:	bf00      	nop
 80017b0:	e000ed04 	.word	0xe000ed04

080017b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017bc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017be:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017c8:	4770      	bx	lr

080017ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ce:	4770      	bx	lr

080017d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80017d0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017d2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80017d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80017de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80017e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80017e2:	3301      	adds	r3, #1
 80017e4:	6003      	str	r3, [r0, #0]
}
 80017e6:	4770      	bx	lr

080017e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017e8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017ea:	1c53      	adds	r3, r2, #1
{
 80017ec:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80017ee:	d10a      	bne.n	8001806 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80017f0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80017f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80017f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80017fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80017fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80017fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001800:	3301      	adds	r3, #1
 8001802:	6003      	str	r3, [r0, #0]
}
 8001804:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001806:	f100 0308 	add.w	r3, r0, #8
 800180a:	685c      	ldr	r4, [r3, #4]
 800180c:	6825      	ldr	r5, [r4, #0]
 800180e:	4295      	cmp	r5, r2
 8001810:	d8ef      	bhi.n	80017f2 <vListInsert+0xa>
 8001812:	4623      	mov	r3, r4
 8001814:	e7f9      	b.n	800180a <vListInsert+0x22>

08001816 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001816:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800181a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800181c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800181e:	6882      	ldr	r2, [r0, #8]
 8001820:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001826:	bf08      	it	eq
 8001828:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800182a:	2200      	movs	r2, #0
 800182c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	3a01      	subs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001834:	6818      	ldr	r0, [r3, #0]
}
 8001836:	4770      	bx	lr

08001838 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001838:	b940      	cbnz	r0, 800184c <prvTaskIsTaskSuspended+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183e:	f383 8811 	msr	BASEPRI, r3
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	e7fe      	b.n	800184a <prvTaskIsTaskSuspended+0x12>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800184c:	6943      	ldr	r3, [r0, #20]
 800184e:	4a06      	ldr	r2, [pc, #24]	; (8001868 <prvTaskIsTaskSuspended+0x30>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d107      	bne.n	8001864 <prvTaskIsTaskSuspended+0x2c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001854:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001856:	3314      	adds	r3, #20
 8001858:	4298      	cmp	r0, r3
 800185a:	d003      	beq.n	8001864 <prvTaskIsTaskSuspended+0x2c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800185c:	fab0 f080 	clz	r0, r0
 8001860:	0940      	lsrs	r0, r0, #5
 8001862:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8001864:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001866:	4770      	bx	lr
 8001868:	2000007c 	.word	0x2000007c

0800186c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <prvResetNextTaskUnblockTime+0x1c>)
 800186e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	b91a      	cbnz	r2, 800187c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800187a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800187c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	6852      	ldr	r2, [r2, #4]
 8001884:	e7f8      	b.n	8001878 <prvResetNextTaskUnblockTime+0xc>
 8001886:	bf00      	nop
 8001888:	2000007c 	.word	0x2000007c

0800188c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800188e:	4c18      	ldr	r4, [pc, #96]	; (80018f0 <prvAddCurrentTaskToDelayedList+0x64>)
{
 8001890:	4606      	mov	r6, r0
 8001892:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8001894:	6b25      	ldr	r5, [r4, #48]	; 0x30
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001896:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001898:	3004      	adds	r0, #4
 800189a:	f7ff ffbc 	bl	8001816 <uxListRemove>
 800189e:	b938      	cbnz	r0, 80018b0 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80018a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018a6:	2201      	movs	r2, #1
 80018a8:	408a      	lsls	r2, r1
 80018aa:	ea23 0302 	bic.w	r3, r3, r2
 80018ae:	63a3      	str	r3, [r4, #56]	; 0x38
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80018b0:	1c73      	adds	r3, r6, #1
 80018b2:	d107      	bne.n	80018c4 <prvAddCurrentTaskToDelayedList+0x38>
 80018b4:	b137      	cbz	r7, 80018c4 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <prvAddCurrentTaskToDelayedList+0x64>)
 80018ba:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80018bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018c0:	f7ff bf86 	b.w	80017d0 <vListInsertEnd>
 80018c4:	19ad      	adds	r5, r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018c8:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80018ca:	d306      	bcc.n	80018da <prvAddCurrentTaskToDelayedList+0x4e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018cc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80018ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 80018d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018d4:	3104      	adds	r1, #4
 80018d6:	f7ff bf87 	b.w	80017e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80018dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018de:	3104      	adds	r1, #4
 80018e0:	f7ff ff82 	bl	80017e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80018e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018e6:	42ab      	cmp	r3, r5
 80018e8:	d900      	bls.n	80018ec <prvAddCurrentTaskToDelayedList+0x60>
					xNextTaskUnblockTime = xTimeToWake;
 80018ea:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000007c 	.word	0x2000007c

080018f4 <prvIdleTask>:
{
 80018f4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018f6:	4c12      	ldr	r4, [pc, #72]	; (8001940 <prvIdleTask+0x4c>)
				taskYIELD();
 80018f8:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 80018fc:	4e11      	ldr	r6, [pc, #68]	; (8001944 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001900:	b943      	cbnz	r3, 8001914 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001902:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d9fa      	bls.n	80018fe <prvIdleTask+0xa>
				taskYIELD();
 8001908:	6037      	str	r7, [r6, #0]
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	e7f4      	b.n	80018fe <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8001914:	f000 fc9e 	bl	8002254 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001918:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800191a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800191c:	1d28      	adds	r0, r5, #4
 800191e:	f7ff ff7a 	bl	8001816 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001922:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001924:	3b01      	subs	r3, #1
 8001926:	6563      	str	r3, [r4, #84]	; 0x54
				--uxDeletedTasksWaitingCleanUp;
 8001928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800192a:	3b01      	subs	r3, #1
 800192c:	65a3      	str	r3, [r4, #88]	; 0x58
			taskEXIT_CRITICAL();
 800192e:	f000 fcb3 	bl	8002298 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001932:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001934:	f000 fbf0 	bl	8002118 <vPortFree>
			vPortFree( pxTCB );
 8001938:	4628      	mov	r0, r5
 800193a:	f000 fbed 	bl	8002118 <vPortFree>
 800193e:	e7de      	b.n	80018fe <prvIdleTask+0xa>
 8001940:	2000007c 	.word	0x2000007c
 8001944:	e000ed04 	.word	0xe000ed04

08001948 <xTaskCreate>:
	{
 8001948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800194c:	0095      	lsls	r5, r2, #2
	{
 800194e:	4680      	mov	r8, r0
 8001950:	460f      	mov	r7, r1
 8001952:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001954:	4628      	mov	r0, r5
	{
 8001956:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001958:	f000 fb58 	bl	800200c <pvPortMalloc>
			if( pxStack != NULL )
 800195c:	4682      	mov	sl, r0
 800195e:	b1b8      	cbz	r0, 8001990 <xTaskCreate+0x48>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001960:	205c      	movs	r0, #92	; 0x5c
 8001962:	f000 fb53 	bl	800200c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001966:	4604      	mov	r4, r0
 8001968:	b178      	cbz	r0, 800198a <xTaskCreate+0x42>
					pxNewTCB->pxStack = pxStack;
 800196a:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800196e:	462a      	mov	r2, r5
 8001970:	4650      	mov	r0, sl
 8001972:	21a5      	movs	r1, #165	; 0xa5
 8001974:	f000 fdd6 	bl	8002524 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001978:	3d04      	subs	r5, #4
 800197a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800197c:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800197e:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 8001982:	b947      	cbnz	r7, 8001996 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001984:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8001988:	e014      	b.n	80019b4 <xTaskCreate+0x6c>
					vPortFree( pxStack );
 800198a:	4650      	mov	r0, sl
 800198c:	f000 fbc4 	bl	8002118 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001990:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001994:	e086      	b.n	8001aa4 <xTaskCreate+0x15c>
 8001996:	1e7b      	subs	r3, r7, #1
 8001998:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800199c:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800199e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80019a2:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80019a6:	7819      	ldrb	r1, [r3, #0]
 80019a8:	b109      	cbz	r1, 80019ae <xTaskCreate+0x66>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019aa:	42bb      	cmp	r3, r7
 80019ac:	d1f7      	bne.n	800199e <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019ae:	2300      	movs	r3, #0
 80019b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 80019b6:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019ba:	1d27      	adds	r7, r4, #4
 80019bc:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80019be:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019c2:	4638      	mov	r0, r7
 80019c4:	bf28      	it	cs
 80019c6:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80019c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80019ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019cc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019d0:	f7ff fefb 	bl	80017ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019d4:	f104 0018 	add.w	r0, r4, #24
 80019d8:	f7ff fef7 	bl	80017ca <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80019dc:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019e0:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019e2:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019e4:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019e6:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019e8:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019ea:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80019ec:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019f0:	f000 fc08 	bl	8002204 <pxPortInitialiseStack>
 80019f4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80019f6:	b106      	cbz	r6, 80019fa <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019f8:	6034      	str	r4, [r6, #0]
		uxCurrentNumberOfTasks++;
 80019fa:	4d31      	ldr	r5, [pc, #196]	; (8001ac0 <xTaskCreate+0x178>)
	taskENTER_CRITICAL();
 80019fc:	f000 fc2a 	bl	8002254 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a00:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001a02:	f105 085c 	add.w	r8, r5, #92	; 0x5c
 8001a06:	3301      	adds	r3, #1
 8001a08:	656b      	str	r3, [r5, #84]	; 0x54
		if( pxCurrentTCB == NULL )
 8001a0a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001a0c:	2e00      	cmp	r6, #0
 8001a0e:	d14c      	bne.n	8001aaa <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8001a10:	636c      	str	r4, [r5, #52]	; 0x34
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d120      	bne.n	8001a5a <xTaskCreate+0x112>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a18:	f04f 0914 	mov.w	r9, #20
 8001a1c:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a20:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a22:	f7ff fec7 	bl	80017b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a26:	2e07      	cmp	r6, #7
 8001a28:	d1f8      	bne.n	8001a1c <xTaskCreate+0xd4>
	vListInitialise( &xDelayedTaskList1 );
 8001a2a:	4e26      	ldr	r6, [pc, #152]	; (8001ac4 <xTaskCreate+0x17c>)
	vListInitialise( &xDelayedTaskList2 );
 8001a2c:	f106 0914 	add.w	r9, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8001a30:	4630      	mov	r0, r6
 8001a32:	f7ff febf 	bl	80017b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a36:	4648      	mov	r0, r9
 8001a38:	f7ff febc 	bl	80017b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a3c:	f1a6 00d4 	sub.w	r0, r6, #212	; 0xd4
 8001a40:	f7ff feb8 	bl	80017b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001a44:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8001a48:	f7ff feb4 	bl	80017b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001a4c:	f1a6 00e8 	sub.w	r0, r6, #232	; 0xe8
 8001a50:	f7ff feb0 	bl	80017b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a54:	62ae      	str	r6, [r5, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a56:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
		uxTaskNumber++;
 8001a5a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8001a5e:	2601      	movs	r6, #1
 8001a60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a62:	2014      	movs	r0, #20
		uxTaskNumber++;
 8001a64:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8001a66:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001a68:	fb00 8002 	mla	r0, r0, r2, r8
		uxTaskNumber++;
 8001a6c:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a70:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001a72:	fa06 f302 	lsl.w	r3, r6, r2
 8001a76:	430b      	orrs	r3, r1
 8001a78:	4639      	mov	r1, r7
 8001a7a:	63ab      	str	r3, [r5, #56]	; 0x38
 8001a7c:	f7ff fea8 	bl	80017d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a80:	f000 fc0a 	bl	8002298 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a84:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8001a88:	b163      	cbz	r3, 8001aa4 <xTaskCreate+0x15c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <xTaskCreate+0x15c>
			taskYIELD_IF_USING_PREEMPTION();
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <xTaskCreate+0x180>)
 8001a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	f3bf 8f6f 	isb	sy
	}
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8001aaa:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1d3      	bne.n	8001a5a <xTaskCreate+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ab2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ab4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3ce      	bcc.n	8001a5a <xTaskCreate+0x112>
					pxCurrentTCB = pxNewTCB;
 8001abc:	636c      	str	r4, [r5, #52]	; 0x34
 8001abe:	e7cc      	b.n	8001a5a <xTaskCreate+0x112>
 8001ac0:	2000007c 	.word	0x2000007c
 8001ac4:	20000164 	.word	0x20000164
 8001ac8:	e000ed04 	.word	0xe000ed04

08001acc <vTaskResume>:
	{
 8001acc:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b940      	cbnz	r0, 8001ae4 <vTaskResume+0x18>
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	e7fe      	b.n	8001ae2 <vTaskResume+0x16>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001ae4:	4d16      	ldr	r5, [pc, #88]	; (8001b40 <vTaskResume+0x74>)
 8001ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ae8:	4283      	cmp	r3, r0
 8001aea:	d028      	beq.n	8001b3e <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8001aec:	f000 fbb2 	bl	8002254 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fea1 	bl	8001838 <prvTaskIsTaskSuspended>
 8001af6:	b1f0      	cbz	r0, 8001b36 <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001af8:	1d26      	adds	r6, r4, #4
 8001afa:	4630      	mov	r0, r6
 8001afc:	f7ff fe8b 	bl	8001816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b02:	2301      	movs	r3, #1
 8001b04:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001b06:	2014      	movs	r0, #20
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	4631      	mov	r1, r6
 8001b0e:	63ab      	str	r3, [r5, #56]	; 0x38
 8001b10:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8001b14:	fb00 3002 	mla	r0, r0, r2, r3
 8001b18:	f7ff fe5a 	bl	80017d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d307      	bcc.n	8001b36 <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <vTaskResume+0x78>)
 8001b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	f3bf 8f6f 	isb	sy
	}
 8001b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8001b3a:	f000 bbad 	b.w	8002298 <vPortExitCritical>
	}
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	2000007c 	.word	0x2000007c
 8001b44:	e000ed04 	.word	0xe000ed04

08001b48 <xTaskResumeFromISR>:
	{
 8001b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( xTaskToResume );
 8001b4c:	4606      	mov	r6, r0
 8001b4e:	b940      	cbnz	r0, 8001b62 <xTaskResumeFromISR+0x1a>
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	e7fe      	b.n	8001b60 <xTaskResumeFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b62:	f000 fc91 	bl	8002488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b66:	f3ef 8711 	mrs	r7, BASEPRI
 8001b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6e:	f383 8811 	msr	BASEPRI, r3
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fe5c 	bl	8001838 <prvTaskIsTaskSuspended>
 8001b80:	b358      	cbz	r0, 8001bda <xTaskResumeFromISR+0x92>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b82:	4d17      	ldr	r5, [pc, #92]	; (8001be0 <xTaskResumeFromISR+0x98>)
 8001b84:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8001b88:	b9fb      	cbnz	r3, 8001bca <xTaskResumeFromISR+0x82>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b8c:	f106 0804 	add.w	r8, r6, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b90:	6af4      	ldr	r4, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001b92:	355c      	adds	r5, #92	; 0x5c
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001b96:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b98:	4640      	mov	r0, r8
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b9a:	bf34      	ite	cc
 8001b9c:	2400      	movcc	r4, #0
 8001b9e:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ba0:	f7ff fe39 	bl	8001816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ba4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f855 1c24 	ldr.w	r1, [r5, #-36]
 8001bac:	2014      	movs	r0, #20
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	4641      	mov	r1, r8
 8001bb4:	f845 3c24 	str.w	r3, [r5, #-36]
 8001bb8:	fb00 5002 	mla	r0, r0, r2, r5
 8001bbc:	f7ff fe08 	bl	80017d0 <vListInsertEnd>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001bc0:	f387 8811 	msr	BASEPRI, r7
	}
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001bca:	f106 0118 	add.w	r1, r6, #24
 8001bce:	f105 0014 	add.w	r0, r5, #20
 8001bd2:	f7ff fdfd 	bl	80017d0 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8001bd6:	2400      	movs	r4, #0
 8001bd8:	e7f2      	b.n	8001bc0 <xTaskResumeFromISR+0x78>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	e7f0      	b.n	8001bc0 <xTaskResumeFromISR+0x78>
 8001bde:	bf00      	nop
 8001be0:	2000007c 	.word	0x2000007c

08001be4 <vTaskStartScheduler>:
{
 8001be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001be6:	4c17      	ldr	r4, [pc, #92]	; (8001c44 <vTaskStartScheduler+0x60>)
 8001be8:	2500      	movs	r5, #0
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <vTaskStartScheduler+0x64>)
 8001bee:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8001bf2:	9500      	str	r5, [sp, #0]
 8001bf4:	4815      	ldr	r0, [pc, #84]	; (8001c4c <vTaskStartScheduler+0x68>)
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	f7ff fea5 	bl	8001948 <xTaskCreate>
	if( xReturn == pdPASS )
 8001bfe:	2801      	cmp	r0, #1
 8001c00:	d112      	bne.n	8001c28 <vTaskStartScheduler+0x44>
	__asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	62e3      	str	r3, [r4, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8001c18:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c1c:	6325      	str	r5, [r4, #48]	; 0x30
}
 8001c1e:	b003      	add	sp, #12
 8001c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001c24:	f000 bbae 	b.w	8002384 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c28:	3001      	adds	r0, #1
 8001c2a:	d108      	bne.n	8001c3e <vTaskStartScheduler+0x5a>
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	e7fe      	b.n	8001c3c <vTaskStartScheduler+0x58>
}
 8001c3e:	b003      	add	sp, #12
 8001c40:	bd30      	pop	{r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	2000007c 	.word	0x2000007c
 8001c48:	080025a2 	.word	0x080025a2
 8001c4c:	080018f5 	.word	0x080018f5

08001c50 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <vTaskSuspendAll+0x10>)
 8001c52:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8001c56:	3301      	adds	r3, #1
 8001c58:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000007c 	.word	0x2000007c

08001c64 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <xTaskGetTickCount+0x8>)
 8001c66:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000007c 	.word	0x2000007c

08001c70 <xTaskGetTickCountFromISR>:
{
 8001c70:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c72:	f000 fc09 	bl	8002488 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8001c76:	4b01      	ldr	r3, [pc, #4]	; (8001c7c <xTaskGetTickCountFromISR+0xc>)
 8001c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8001c7a:	bd08      	pop	{r3, pc}
 8001c7c:	2000007c 	.word	0x2000007c

08001c80 <xTaskIncrementTick>:
{
 8001c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <xTaskIncrementTick+0xe0>)
 8001c86:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001c8a:	461c      	mov	r4, r3
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d15f      	bne.n	8001d50 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c90:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001c92:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8001c94:	631f      	str	r7, [r3, #48]	; 0x30
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c96:	b9b7      	cbnz	r7, 8001cc6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b143      	cbz	r3, 8001cb0 <xTaskIncrementTick+0x30>
 8001c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca2:	f383 8811 	msr	BASEPRI, r3
 8001ca6:	f3bf 8f6f 	isb	sy
 8001caa:	f3bf 8f4f 	dsb	sy
 8001cae:	e7fe      	b.n	8001cae <xTaskIncrementTick+0x2e>
 8001cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001cb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001cb8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001cc2:	f7ff fdd3 	bl	800186c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
BaseType_t xSwitchRequired = pdFALSE;
 8001cc8:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001cca:	42bb      	cmp	r3, r7
 8001ccc:	d910      	bls.n	8001cf0 <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cd0:	2214      	movs	r2, #20
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	fb02 4303 	mla	r3, r2, r3, r4
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				xSwitchRequired = pdTRUE;
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	bf28      	it	cs
 8001cde:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8001ce0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
			xSwitchRequired = pdTRUE;
 8001ce4:	2b00      	cmp	r3, #0
}
 8001ce6:	bf0c      	ite	eq
 8001ce8:	4628      	moveq	r0, r5
 8001cea:	2001      	movne	r0, #1
 8001cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8001cf0:	f04f 0b01 	mov.w	fp, #1
 8001cf4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001d64 <xTaskIncrementTick+0xe4>
 8001cf8:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b91b      	cbnz	r3, 8001d0a <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 8001d06:	62e3      	str	r3, [r4, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d08:	e7e1      	b.n	8001cce <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d10:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001d12:	429f      	cmp	r7, r3
 8001d14:	d3f7      	bcc.n	8001d06 <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d16:	f106 0804 	add.w	r8, r6, #4
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	f7ff fd7b 	bl	8001816 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d20:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001d22:	b11b      	cbz	r3, 8001d2c <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d24:	f106 0018 	add.w	r0, r6, #24
 8001d28:	f7ff fd75 	bl	8001816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d2c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001d2e:	4641      	mov	r1, r8
 8001d30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d32:	fa0b f300 	lsl.w	r3, fp, r0
 8001d36:	fb0a 9000 	mla	r0, sl, r0, r9
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d3e:	f7ff fd47 	bl	80017d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d44:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	bf28      	it	cs
 8001d4c:	2501      	movcs	r5, #1
 8001d4e:	e7d5      	b.n	8001cfc <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8001d50:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8001d54:	2500      	movs	r5, #0
		++uxPendedTicks;
 8001d56:	3301      	adds	r3, #1
 8001d58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8001d5c:	e7c0      	b.n	8001ce0 <xTaskIncrementTick+0x60>
 8001d5e:	bf00      	nop
 8001d60:	2000007c 	.word	0x2000007c
 8001d64:	200000d8 	.word	0x200000d8

08001d68 <xTaskResumeAll>:
{
 8001d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001d6c:	4c31      	ldr	r4, [pc, #196]	; (8001e34 <xTaskResumeAll+0xcc>)
 8001d6e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8001d72:	b943      	cbnz	r3, 8001d86 <xTaskResumeAll+0x1e>
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	e7fe      	b.n	8001d84 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8001d86:	f000 fa65 	bl	8002254 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001d8a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d94:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8001d98:	b12d      	cbz	r5, 8001da6 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d9a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d9c:	f000 fa7c 	bl	8002298 <vPortExitCritical>
}
 8001da0:	4620      	mov	r0, r4
 8001da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001da6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f6      	beq.n	8001d9a <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8001dac:	2601      	movs	r6, #1
 8001dae:	f104 075c 	add.w	r7, r4, #92	; 0x5c
 8001db2:	f04f 0814 	mov.w	r8, #20
 8001db6:	e01c      	b.n	8001df2 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db8:	6a23      	ldr	r3, [r4, #32]
 8001dba:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dbc:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dc0:	f105 0018 	add.w	r0, r5, #24
 8001dc4:	f7ff fd27 	bl	8001816 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dc8:	4648      	mov	r0, r9
 8001dca:	f7ff fd24 	bl	8001816 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dce:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	fa06 f300 	lsl.w	r3, r6, r0
 8001dd8:	fb08 7000 	mla	r0, r8, r0, r7
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	63a3      	str	r3, [r4, #56]	; 0x38
 8001de0:	f7ff fcf6 	bl	80017d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001de6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d301      	bcc.n	8001df2 <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 8001dee:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001df2:	6963      	ldr	r3, [r4, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1df      	bne.n	8001db8 <xTaskResumeAll+0x50>
				if( pxTCB != NULL )
 8001df8:	b10d      	cbz	r5, 8001dfe <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8001dfa:	f7ff fd37 	bl	800186c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dfe:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e02:	b14d      	cbz	r5, 8001e18 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8001e04:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001e06:	f7ff ff3b 	bl	8001c80 <xTaskIncrementTick>
 8001e0a:	b108      	cbz	r0, 8001e10 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8001e0c:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e10:	3d01      	subs	r5, #1
 8001e12:	d1f8      	bne.n	8001e06 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8001e14:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 8001e18:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0bc      	beq.n	8001d9a <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <xTaskResumeAll+0xd0>)
 8001e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001e30:	2401      	movs	r4, #1
 8001e32:	e7b3      	b.n	8001d9c <xTaskResumeAll+0x34>
 8001e34:	2000007c 	.word	0x2000007c
 8001e38:	e000ed04 	.word	0xe000ed04

08001e3c <vTaskDelay>:
	{
 8001e3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e3e:	b940      	cbnz	r0, 8001e52 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <vTaskDelay+0x44>)
 8001e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	f3bf 8f6f 	isb	sy
	}
 8001e50:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <vTaskDelay+0x48>)
 8001e54:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8001e58:	b141      	cbz	r1, 8001e6c <vTaskDelay+0x30>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e6c:	f7ff fef0 	bl	8001c50 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e70:	f7ff fd0c 	bl	800188c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001e74:	f7ff ff78 	bl	8001d68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d0e1      	beq.n	8001e40 <vTaskDelay+0x4>
 8001e7c:	e7e8      	b.n	8001e50 <vTaskDelay+0x14>
 8001e7e:	bf00      	nop
 8001e80:	e000ed04 	.word	0xe000ed04
 8001e84:	2000007c 	.word	0x2000007c

08001e88 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <vTaskSwitchContext+0x60>)
 8001e8a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001e8e:	4618      	mov	r0, r3
{
 8001e90:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e92:	b11a      	cbz	r2, 8001e9c <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8001e94:	2201      	movs	r2, #1
 8001e96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001e9a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001e9c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	2114      	movs	r1, #20
 8001eaa:	f1c2 021f 	rsb	r2, r2, #31
 8001eae:	4351      	muls	r1, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001eb4:	b944      	cbnz	r4, 8001ec8 <vTaskSwitchContext+0x40>
	__asm volatile
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	e7fe      	b.n	8001ec6 <vTaskSwitchContext+0x3e>
 8001ec8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001eca:	4401      	add	r1, r0
 8001ecc:	6864      	ldr	r4, [r4, #4]
 8001ece:	3164      	adds	r1, #100	; 0x64
 8001ed0:	428c      	cmp	r4, r1
 8001ed2:	661c      	str	r4, [r3, #96]	; 0x60
 8001ed4:	bf04      	itt	eq
 8001ed6:	6861      	ldreq	r1, [r4, #4]
 8001ed8:	6619      	streq	r1, [r3, #96]	; 0x60
 8001eda:	2314      	movs	r3, #20
 8001edc:	fb03 0202 	mla	r2, r3, r2, r0
 8001ee0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	6343      	str	r3, [r0, #52]	; 0x34
}
 8001ee6:	e7d8      	b.n	8001e9a <vTaskSwitchContext+0x12>
 8001ee8:	2000007c 	.word	0x2000007c

08001eec <vTaskSuspend>:
	{
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	4605      	mov	r5, r0
 8001ef0:	4c2b      	ldr	r4, [pc, #172]	; (8001fa0 <vTaskSuspend+0xb4>)
		taskENTER_CRITICAL();
 8001ef2:	f000 f9af 	bl	8002254 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001ef6:	b905      	cbnz	r5, 8001efa <vTaskSuspend+0xe>
 8001ef8:	6b65      	ldr	r5, [r4, #52]	; 0x34
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001efa:	1d2e      	adds	r6, r5, #4
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7ff fc8a 	bl	8001816 <uxListRemove>
 8001f02:	b958      	cbnz	r0, 8001f1c <vTaskSuspend+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001f04:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001f06:	2114      	movs	r1, #20
 8001f08:	fb01 4100 	mla	r1, r1, r0, r4
 8001f0c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8001f0e:	b92b      	cbnz	r3, 8001f1c <vTaskSuspend+0x30>
 8001f10:	2201      	movs	r2, #1
 8001f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f14:	4082      	lsls	r2, r0
 8001f16:	ea23 0302 	bic.w	r3, r3, r2
 8001f1a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f1e:	b11b      	cbz	r3, 8001f28 <vTaskSuspend+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f20:	f105 0018 	add.w	r0, r5, #24
 8001f24:	f7ff fc77 	bl	8001816 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001f28:	4631      	mov	r1, r6
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <vTaskSuspend+0xb4>)
 8001f2c:	f7ff fc50 	bl	80017d0 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001f30:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d102      	bne.n	8001f3e <vTaskSuspend+0x52>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
		taskEXIT_CRITICAL();
 8001f3e:	f000 f9ab 	bl	8002298 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8001f42:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001f46:	b12b      	cbz	r3, 8001f54 <vTaskSuspend+0x68>
			taskENTER_CRITICAL();
 8001f48:	f000 f984 	bl	8002254 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8001f4c:	f7ff fc8e 	bl	800186c <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8001f50:	f000 f9a2 	bl	8002298 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8001f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	d116      	bne.n	8001f88 <vTaskSuspend+0x9c>
			if( xSchedulerRunning != pdFALSE )
 8001f5a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001f5e:	b1a3      	cbz	r3, 8001f8a <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8001f60:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8001f64:	b143      	cbz	r3, 8001f78 <vTaskSuspend+0x8c>
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	e7fe      	b.n	8001f76 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <vTaskSuspend+0xb8>)
 8001f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	f3bf 8f6f 	isb	sy
	}
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001f8a:	6821      	ldr	r1, [r4, #0]
 8001f8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f8e:	4291      	cmp	r1, r2
 8001f90:	d101      	bne.n	8001f96 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8001f92:	6363      	str	r3, [r4, #52]	; 0x34
 8001f94:	e7f8      	b.n	8001f88 <vTaskSuspend+0x9c>
	}
 8001f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8001f9a:	f7ff bf75 	b.w	8001e88 <vTaskSwitchContext>
 8001f9e:	bf00      	nop
 8001fa0:	2000007c 	.word	0x2000007c
 8001fa4:	e000ed04 	.word	0xe000ed04

08001fa8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <xTaskGetSchedulerState+0x1c>)
 8001faa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001fae:	b132      	cbz	r2, 8001fbe <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fb0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001fb4:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2002      	moveq	r0, #2
 8001fba:	2000      	movne	r0, #0
 8001fbc:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001fbe:	2001      	movs	r0, #1
	}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000007c 	.word	0x2000007c

08001fc8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <prvInsertBlockIntoFreeList+0x40>)
{
 8001fca:	b530      	push	{r4, r5, lr}
 8001fcc:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4282      	cmp	r2, r0
 8001fd2:	d317      	bcc.n	8002004 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001fd4:	685c      	ldr	r4, [r3, #4]
 8001fd6:	1919      	adds	r1, r3, r4
 8001fd8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001fda:	bf01      	itttt	eq
 8001fdc:	6841      	ldreq	r1, [r0, #4]
 8001fde:	4618      	moveq	r0, r3
 8001fe0:	1909      	addeq	r1, r1, r4
 8001fe2:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001fe4:	6844      	ldr	r4, [r0, #4]
 8001fe6:	1901      	adds	r1, r0, r4
 8001fe8:	428a      	cmp	r2, r1
 8001fea:	d106      	bne.n	8001ffa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001fec:	68a9      	ldr	r1, [r5, #8]
 8001fee:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ff0:	bf1f      	itttt	ne
 8001ff2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ff4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ff6:	1909      	addne	r1, r1, r4
 8001ff8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ffa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ffc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ffe:	bf18      	it	ne
 8002000:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002002:	bd30      	pop	{r4, r5, pc}
 8002004:	4613      	mov	r3, r2
 8002006:	e7e2      	b.n	8001fce <prvInsertBlockIntoFreeList+0x6>
 8002008:	200001a8 	.word	0x200001a8

0800200c <pvPortMalloc>:
{
 800200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8002010:	4d40      	ldr	r5, [pc, #256]	; (8002114 <pvPortMalloc+0x108>)
{
 8002012:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002014:	f7ff fe1c 	bl	8001c50 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002018:	68ab      	ldr	r3, [r5, #8]
 800201a:	bb0b      	cbnz	r3, 8002060 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 800201c:	f105 020c 	add.w	r2, r5, #12
 8002020:	f605 030c 	addw	r3, r5, #2060	; 0x80c
	xStart.xBlockSize = ( size_t ) 0;
 8002024:	2100      	movs	r1, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002026:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8002028:	6069      	str	r1, [r5, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800202a:	bf17      	itett	ne
 800202c:	f105 0213 	addne.w	r2, r5, #19
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002030:	f44f 6300 	moveq.w	r3, #2048	; 0x800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002034:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002038:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800203a:	602a      	str	r2, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800203c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800203e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002040:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8002044:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002048:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800204a:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800204c:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002054:	f8c5 180c 	str.w	r1, [r5, #2060]	; 0x80c
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002058:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800205c:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002060:	f8d5 8814 	ldr.w	r8, [r5, #2068]	; 0x814
 8002064:	ea18 0f04 	tst.w	r8, r4
 8002068:	d14f      	bne.n	800210a <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 800206a:	2c00      	cmp	r4, #0
 800206c:	d040      	beq.n	80020f0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800206e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002072:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002074:	bf1c      	itt	ne
 8002076:	f023 0307 	bicne.w	r3, r3, #7
 800207a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800207c:	2b00      	cmp	r3, #0
 800207e:	d044      	beq.n	800210a <pvPortMalloc+0xfe>
 8002080:	f8d5 7810 	ldr.w	r7, [r5, #2064]	; 0x810
 8002084:	429f      	cmp	r7, r3
 8002086:	d340      	bcc.n	800210a <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8002088:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 800208a:	4822      	ldr	r0, [pc, #136]	; (8002114 <pvPortMalloc+0x108>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800208c:	6872      	ldr	r2, [r6, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d201      	bcs.n	8002096 <pvPortMalloc+0x8a>
 8002092:	6831      	ldr	r1, [r6, #0]
 8002094:	b9a1      	cbnz	r1, 80020c0 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8002096:	68a9      	ldr	r1, [r5, #8]
 8002098:	42b1      	cmp	r1, r6
 800209a:	d036      	beq.n	800210a <pvPortMalloc+0xfe>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800209c:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800209e:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020a0:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020a2:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020a4:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020a6:	d912      	bls.n	80020ce <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80020a8:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020aa:	0741      	lsls	r1, r0, #29
 80020ac:	d00b      	beq.n	80020c6 <pvPortMalloc+0xba>
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	e7fe      	b.n	80020be <pvPortMalloc+0xb2>
 80020c0:	4630      	mov	r0, r6
 80020c2:	460e      	mov	r6, r1
 80020c4:	e7e2      	b.n	800208c <pvPortMalloc+0x80>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80020c6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80020c8:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80020ca:	f7ff ff7d 	bl	8001fc8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020ce:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020d0:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80020d2:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020d6:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80020d8:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80020dc:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80020de:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80020e0:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020e4:	f8c5 7810 	str.w	r7, [r5, #2064]	; 0x810
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80020e8:	bf38      	it	cc
 80020ea:	f8c5 780c 	strcc.w	r7, [r5, #2060]	; 0x80c
					pxBlock->pxNextFreeBlock = NULL;
 80020ee:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 80020f0:	f7ff fe3a 	bl	8001d68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80020f4:	0763      	lsls	r3, r4, #29
 80020f6:	d00a      	beq.n	800210e <pvPortMalloc+0x102>
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	e7fe      	b.n	8002108 <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 800210a:	2400      	movs	r4, #0
 800210c:	e7f0      	b.n	80020f0 <pvPortMalloc+0xe4>
}
 800210e:	4620      	mov	r0, r4
 8002110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002114:	200001a8 	.word	0x200001a8

08002118 <vPortFree>:
{
 8002118:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800211a:	4604      	mov	r4, r0
 800211c:	b380      	cbz	r0, 8002180 <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800211e:	4d19      	ldr	r5, [pc, #100]	; (8002184 <vPortFree+0x6c>)
 8002120:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002124:	f8d5 2814 	ldr.w	r2, [r5, #2068]	; 0x814
 8002128:	4213      	tst	r3, r2
 800212a:	d108      	bne.n	800213e <vPortFree+0x26>
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	e7fe      	b.n	800213c <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800213e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002142:	b141      	cbz	r1, 8002156 <vPortFree+0x3e>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	e7fe      	b.n	8002154 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002156:	ea23 0302 	bic.w	r3, r3, r2
 800215a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800215e:	f7ff fd77 	bl	8001c50 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002162:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8002166:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800216a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800216e:	4413      	add	r3, r2
 8002170:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002174:	f7ff ff28 	bl	8001fc8 <prvInsertBlockIntoFreeList>
}
 8002178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800217c:	f7ff bdf4 	b.w	8001d68 <xTaskResumeAll>
}
 8002180:	bd38      	pop	{r3, r4, r5, pc}
 8002182:	bf00      	nop
 8002184:	200001a8 	.word	0x200001a8

08002188 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8002188:	2300      	movs	r3, #0
{
 800218a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800218c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <prvTaskExitError+0x3c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	d008      	beq.n	80021a8 <prvTaskExitError+0x20>
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	e7fe      	b.n	80021a6 <prvTaskExitError+0x1e>
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80021b8:	9b01      	ldr	r3, [sp, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0fc      	beq.n	80021b8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80021be:	b002      	add	sp, #8
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010

080021c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <prvPortStartFirstTask+0x24>)
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	6800      	ldr	r0, [r0, #0]
 80021ce:	f380 8808 	msr	MSP, r0
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f380 8814 	msr	CONTROL, r0
 80021da:	b662      	cpsie	i
 80021dc:	b661      	cpsie	f
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	df00      	svc	0
 80021e8:	bf00      	nop
 80021ea:	0000      	.short	0x0000
 80021ec:	e000ed08 	.word	0xe000ed08

080021f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80021f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002200 <vPortEnableVFP+0x10>
 80021f4:	6801      	ldr	r1, [r0, #0]
 80021f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80021fa:	6001      	str	r1, [r0, #0]
 80021fc:	4770      	bx	lr
 80021fe:	0000      	.short	0x0000
 8002200:	e000ed88 	.word	0xe000ed88

08002204 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002208:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800220c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002210:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002212:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002216:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002218:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800221a:	f06f 0302 	mvn.w	r3, #2
 800221e:	6203      	str	r3, [r0, #32]
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	08002189 	.word	0x08002189
	...

08002230 <SVC_Handler>:
	__asm volatile (
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <pxCurrentTCBConst2>)
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	6808      	ldr	r0, [r1, #0]
 8002236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223a:	f380 8809 	msr	PSP, r0
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f380 8811 	msr	BASEPRI, r0
 800224a:	4770      	bx	lr
 800224c:	f3af 8000 	nop.w

08002250 <pxCurrentTCBConst2>:
 8002250:	200000b0 	.word	0x200000b0

08002254 <vPortEnterCritical>:
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <vPortEnterCritical+0x3c>)
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800226a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800226c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800226e:	d10d      	bne.n	800228c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <vPortEnterCritical+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002278:	d008      	beq.n	800228c <vPortEnterCritical+0x38>
 800227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	e7fe      	b.n	800228a <vPortEnterCritical+0x36>
}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000010 	.word	0x20000010
 8002294:	e000ed04 	.word	0xe000ed04

08002298 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002298:	4a08      	ldr	r2, [pc, #32]	; (80022bc <vPortExitCritical+0x24>)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	b943      	cbnz	r3, 80022b0 <vPortExitCritical+0x18>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	e7fe      	b.n	80022ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80022b0:	3b01      	subs	r3, #1
 80022b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80022b4:	b90b      	cbnz	r3, 80022ba <vPortExitCritical+0x22>
	__asm volatile
 80022b6:	f383 8811 	msr	BASEPRI, r3
}
 80022ba:	4770      	bx	lr
 80022bc:	20000010 	.word	0x20000010

080022c0 <PendSV_Handler>:
	__asm volatile
 80022c0:	f3ef 8009 	mrs	r0, PSP
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <pxCurrentTCBConst>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	f01e 0f10 	tst.w	lr, #16
 80022d0:	bf08      	it	eq
 80022d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80022d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	6010      	str	r0, [r2, #0]
 80022dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80022e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80022e4:	f380 8811 	msr	BASEPRI, r0
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f7ff fdca 	bl	8001e88 <vTaskSwitchContext>
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f380 8811 	msr	BASEPRI, r0
 80022fc:	bc09      	pop	{r0, r3}
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	6808      	ldr	r0, [r1, #0]
 8002302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002306:	f01e 0f10 	tst.w	lr, #16
 800230a:	bf08      	it	eq
 800230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002310:	f380 8809 	msr	PSP, r0
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	f3af 8000 	nop.w

08002320 <pxCurrentTCBConst>:
 8002320:	200000b0 	.word	0x200000b0

08002324 <xPortSysTickHandler>:
{
 8002324:	b508      	push	{r3, lr}
	__asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002336:	f7ff fca3 	bl	8001c80 <xTaskIncrementTick>
 800233a:	b118      	cbz	r0, 8002344 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <xPortSysTickHandler+0x28>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002344:	2300      	movs	r3, #0
 8002346:	f383 8811 	msr	BASEPRI, r3
}
 800234a:	bd08      	pop	{r3, pc}
 800234c:	e000ed04 	.word	0xe000ed04

08002350 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002354:	4908      	ldr	r1, [pc, #32]	; (8002378 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002358:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800235a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <vPortSetupTimerInterrupt+0x2c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	4906      	ldr	r1, [pc, #24]	; (8002380 <vPortSetupTimerInterrupt+0x30>)
 8002368:	3b01      	subs	r3, #1
 800236a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800236c:	2307      	movs	r3, #7
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010
 8002378:	e000e018 	.word	0xe000e018
 800237c:	20000000 	.word	0x20000000
 8002380:	e000e014 	.word	0xe000e014

08002384 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <xPortStartScheduler+0xe4>)
 8002386:	4a39      	ldr	r2, [pc, #228]	; (800246c <xPortStartScheduler+0xe8>)
{
 8002388:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	4291      	cmp	r1, r2
 800238e:	d108      	bne.n	80023a2 <xPortStartScheduler+0x1e>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	e7fe      	b.n	80023a0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <xPortStartScheduler+0xec>)
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d108      	bne.n	80023bc <xPortStartScheduler+0x38>
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023be:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80023d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <xPortStartScheduler+0xf4>)
 80023d8:	f002 0250 	and.w	r2, r2, #80	; 0x50
 80023dc:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80023de:	2207      	movs	r2, #7
 80023e0:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80023e6:	1e54      	subs	r4, r2, #1
 80023e8:	0600      	lsls	r0, r0, #24
 80023ea:	d40d      	bmi.n	8002408 <xPortStartScheduler+0x84>
 80023ec:	b101      	cbz	r1, 80023f0 <xPortStartScheduler+0x6c>
 80023ee:	605a      	str	r2, [r3, #4]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2a03      	cmp	r2, #3
 80023f4:	d011      	beq.n	800241a <xPortStartScheduler+0x96>
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	e7fe      	b.n	8002406 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002408:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800240c:	2101      	movs	r1, #1
 800240e:	0052      	lsls	r2, r2, #1
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f88d 2003 	strb.w	r2, [sp, #3]
 8002416:	4622      	mov	r2, r4
 8002418:	e7e3      	b.n	80023e2 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800241a:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800241c:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800241e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002422:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002424:	9b01      	ldr	r3, [sp, #4]
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <xPortStartScheduler+0xf0>)
 8002428:	b2db      	uxtb	r3, r3
 800242a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <xPortStartScheduler+0xf8>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800243c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800243e:	f7ff ff87 	bl	8002350 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <xPortStartScheduler+0xfc>)
 8002444:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002446:	f7ff fed3 	bl	80021f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <xPortStartScheduler+0x100>)
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002452:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002454:	f7ff feb8 	bl	80021c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002458:	f7ff fd16 	bl	8001e88 <vTaskSwitchContext>
	prvTaskExitError();
 800245c:	f7ff fe94 	bl	8002188 <prvTaskExitError>
}
 8002460:	4620      	mov	r0, r4
 8002462:	b002      	add	sp, #8
 8002464:	bd10      	pop	{r4, pc}
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00
 800246c:	410fc271 	.word	0x410fc271
 8002470:	410fc270 	.word	0x410fc270
 8002474:	e000e400 	.word	0xe000e400
 8002478:	200009c0 	.word	0x200009c0
 800247c:	e000ed20 	.word	0xe000ed20
 8002480:	20000010 	.word	0x20000010
 8002484:	e000ef34 	.word	0xe000ef34

08002488 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002488:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800248c:	2b0f      	cmp	r3, #15
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <vPortValidateInterruptPriority+0x48>)
 8002490:	d90d      	bls.n	80024ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002492:	4910      	ldr	r1, [pc, #64]	; (80024d4 <vPortValidateInterruptPriority+0x4c>)
 8002494:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002496:	7811      	ldrb	r1, [r2, #0]
 8002498:	4299      	cmp	r1, r3
 800249a:	d908      	bls.n	80024ae <vPortValidateInterruptPriority+0x26>
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	e7fe      	b.n	80024ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <vPortValidateInterruptPriority+0x50>)
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d908      	bls.n	80024ce <vPortValidateInterruptPriority+0x46>
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	e7fe      	b.n	80024cc <vPortValidateInterruptPriority+0x44>
	}
 80024ce:	4770      	bx	lr
 80024d0:	200009c0 	.word	0x200009c0
 80024d4:	e000e3f0 	.word	0xe000e3f0
 80024d8:	e000ed0c 	.word	0xe000ed0c

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4e0d      	ldr	r6, [pc, #52]	; (8002514 <__libc_init_array+0x38>)
 80024e0:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <__libc_init_array+0x3c>)
 80024e2:	1ba4      	subs	r4, r4, r6
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	2500      	movs	r5, #0
 80024e8:	42a5      	cmp	r5, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	4e0b      	ldr	r6, [pc, #44]	; (800251c <__libc_init_array+0x40>)
 80024ee:	4c0c      	ldr	r4, [pc, #48]	; (8002520 <__libc_init_array+0x44>)
 80024f0:	f000 f820 	bl	8002534 <_init>
 80024f4:	1ba4      	subs	r4, r4, r6
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	2500      	movs	r5, #0
 80024fa:	42a5      	cmp	r5, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002504:	4798      	blx	r3
 8002506:	3501      	adds	r5, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800250e:	4798      	blx	r3
 8002510:	3501      	adds	r5, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	080025a8 	.word	0x080025a8
 8002518:	080025a8 	.word	0x080025a8
 800251c:	080025a8 	.word	0x080025a8
 8002520:	080025ac 	.word	0x080025ac

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
